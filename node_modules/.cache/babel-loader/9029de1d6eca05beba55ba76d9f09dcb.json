{"remainingRequest":"/Users/gim-yeongjae/Desktop/storelink3-admin/node_modules/thread-loader/dist/cjs.js!/Users/gim-yeongjae/Desktop/storelink3-admin/node_modules/babel-loader/lib/index.js!/Users/gim-yeongjae/Desktop/storelink3-admin/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/gim-yeongjae/Desktop/storelink3-admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/gim-yeongjae/Desktop/storelink3-admin/src/views/apps/chat/Chat.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/gim-yeongjae/Desktop/storelink3-admin/src/views/apps/chat/Chat.vue","mtime":1610509510820},{"path":"/Users/gim-yeongjae/Desktop/storelink3-admin/node_modules/cache-loader/dist/cjs.js","mtime":1610346344693},{"path":"/Users/gim-yeongjae/Desktop/storelink3-admin/node_modules/thread-loader/dist/cjs.js","mtime":1610344922450},{"path":"/Users/gim-yeongjae/Desktop/storelink3-admin/node_modules/babel-loader/lib/index.js","mtime":1610344922456},{"path":"/Users/gim-yeongjae/Desktop/storelink3-admin/node_modules/cache-loader/dist/cjs.js","mtime":1610346344693},{"path":"/Users/gim-yeongjae/Desktop/storelink3-admin/node_modules/vue-loader/lib/index.js","mtime":1610344923547}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport ChatContact from \"./ChatContact.vue\";\nimport ChatLog from \"./ChatLog.vue\";\nimport ChatNavbar from \"./ChatNavbar.vue\";\nimport UserProfile from \"./UserProfile.vue\";\nimport VuePerfectScrollbar from 'vue-perfect-scrollbar';\nimport moduleChat from '@/store/chat/moduleChat.js';\nexport default {\n  data: function data() {\n    return {\n      active: true,\n      isHidden: false,\n      searchContact: '',\n      activeProfileSidebar: false,\n      activeChatUser: null,\n      userProfileId: -1,\n      typedMessage: '',\n      isChatPinned: false,\n      settings: {\n        maxScrollbarLength: 60,\n        wheelSpeed: 0.70\n      },\n      clickNotClose: true,\n      isChatSidebarActive: true,\n      isLoggedInUserProfileView: false\n    };\n  },\n  watch: {\n    windowWidth: function windowWidth() {\n      this.setSidebarWidth();\n    }\n  },\n  computed: {\n    chatLastMessaged: function chatLastMessaged() {\n      var _this = this;\n\n      return function (userId) {\n        return _this.$store.getters['chat/chatLastMessaged'](userId);\n      };\n    },\n    chatUnseenMessages: function chatUnseenMessages() {\n      var _this2 = this;\n\n      return function (userId) {\n        var unseenMsg = _this2.$store.getters['chat/chatUnseenMessages'](userId);\n\n        if (unseenMsg) return unseenMsg;\n      };\n    },\n    activeUser: function activeUser() {\n      return this.$store.state.AppActiveUser;\n    },\n    getStatusColor: function getStatusColor() {\n      var _this3 = this;\n\n      return function (isActiveUser) {\n        var userStatus = _this3.getUserStatus(isActiveUser);\n\n        if (userStatus === 'online') {\n          return 'success';\n        } else if (userStatus === 'do not disturb') {\n          return 'danger';\n        } else if (userStatus === 'away') {\n          return 'warning';\n        } else {\n          return 'grey';\n        }\n      };\n    },\n    chatContacts: function chatContacts() {\n      return this.$store.getters['chat/chatContacts'];\n    },\n    contacts: function contacts() {\n      return this.$store.getters['chat/contacts'];\n    },\n    searchQuery: {\n      get: function get() {\n        return this.$store.state.chat.chatSearchQuery;\n      },\n      set: function set(val) {\n        this.$store.dispatch('chat/setChatSearchQuery', val);\n      }\n    },\n    scrollbarTag: function scrollbarTag() {\n      return this.$store.getters.scrollbarTag;\n    },\n    isActiveChatUser: function isActiveChatUser() {\n      var _this4 = this;\n\n      return function (userId) {\n        return userId === _this4.activeChatUser;\n      };\n    },\n    windowWidth: function windowWidth() {\n      return this.$store.state.windowWidth;\n    }\n  },\n  methods: {\n    getUserStatus: function getUserStatus(isActiveUser) {\n      // return \"active\"\n      return isActiveUser ? this.$store.state.AppActiveUser.status : this.contacts[this.activeChatUser].status;\n    },\n    closeProfileSidebar: function closeProfileSidebar(value) {\n      this.activeProfileSidebar = value;\n    },\n    updateActiveChatUser: function updateActiveChatUser(contactId) {\n      this.activeChatUser = contactId;\n\n      if (this.$store.getters['chat/chatDataOfUser'](this.activeChatUser)) {\n        this.$store.dispatch('chat/markSeenAllMessages', contactId);\n      }\n\n      var chatData = this.$store.getters['chat/chatDataOfUser'](this.activeChatUser);\n      if (chatData) this.isChatPinned = chatData.isPinned;else this.isChatPinned = false;\n      this.toggleChatSidebar();\n      this.typedMessage = '';\n    },\n    showProfileSidebar: function showProfileSidebar(userId) {\n      var openOnLeft = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      this.userProfileId = userId;\n      this.isLoggedInUserProfileView = openOnLeft;\n      this.activeProfileSidebar = !this.activeProfileSidebar;\n    },\n    sendMsg: function sendMsg() {\n      if (!this.typedMessage) return;\n      var payload = {\n        'isPinned': this.isChatPinned,\n        'msg': {\n          'textContent': this.typedMessage,\n          'time': String(new Date()),\n          'isSent': true,\n          'isSeen': false\n        },\n        'id': this.activeChatUser\n      };\n      this.$store.dispatch('chat/sendChatMessage', payload);\n      this.typedMessage = '';\n      var scroll_el = this.$refs.chatLogPS.$el || this.$refs.chatLogPS;\n      scroll_el.scrollTop = this.$refs.chatLog.scrollHeight;\n    },\n    toggleIsChatPinned: function toggleIsChatPinned(value) {\n      this.isChatPinned = value;\n    },\n    setSidebarWidth: function setSidebarWidth() {\n      if (this.windowWidth < 1200) {\n        this.isChatSidebarActive = this.clickNotClose = false;\n      } else {\n        this.isChatSidebarActive = this.clickNotClose = true;\n      }\n    },\n    toggleChatSidebar: function toggleChatSidebar() {\n      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      if (!value && this.clickNotClose) return;\n      this.isChatSidebarActive = value;\n    }\n  },\n  components: {\n    VuePerfectScrollbar: VuePerfectScrollbar,\n    ChatContact: ChatContact,\n    UserProfile: UserProfile,\n    ChatNavbar: ChatNavbar,\n    ChatLog: ChatLog\n  },\n  created: function created() {\n    this.$store.registerModule('chat', moduleChat);\n    this.$store.dispatch('chat/fetchContacts');\n    this.$store.dispatch('chat/fetchChatContacts');\n    this.$store.dispatch('chat/fetchChats');\n    this.setSidebarWidth();\n  },\n  beforeDestroy: function beforeDestroy() {\n    this.$store.unregisterModule('chat');\n  },\n  mounted: function mounted() {\n    this.$store.dispatch('chat/setChatSearchQuery', '');\n  }\n};",{"version":3,"sources":["Chat.vue"],"names":[],"mappings":"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","sourcesContent":["<!-- =========================================================================================\n    File Name: Chat.vue\n    Description: Chat Application - Stay connected\n    ----------------------------------------------------------------------------------------\n    Item Name: Vuexy - Vuejs, HTML & Laravel Admin Dashboard Template\n      Author: Pixinvent\n    Author URL: http://www.themeforest.net/user/pixinvent\n========================================================================================== -->\n\n\n<template>\n    <div id=\"chat-app\" class=\"border border-solid d-theme-border-grey-light rounded relative overflow-hidden\">\n        <vs-sidebar class=\"items-no-padding\" parent=\"#chat-app\" :click-not-close=\"clickNotClose\" :hidden-background=\"clickNotClose\" v-model=\"isChatSidebarActive\" id=\"chat-list-sidebar\">\n\n            <!-- USER PROFILE SIDEBAR -->\n            <user-profile :active=\"activeProfileSidebar\" :userId=\"userProfileId\" class=\"user-profile-container\" :isLoggedInUser=\"isLoggedInUserProfileView\" @closeProfileSidebar=\"closeProfileSidebar\"></user-profile>\n\n            <div class=\"chat__profile-search flex p-4\">\n                <div class=\"relative inline-flex\">\n                    <vs-avatar v-if=\"activeUser.photoURL\" class=\"m-0 border-2 border-solid border-white\" :src=\"activeUser.photoURL\" size=\"40px\" @click=\"showProfileSidebar(Number(activeUser.uid), true)\" />\n                    <div class=\"h-3 w-3 border-white border border-solid rounded-full absolute right-0 bottom-0\" :class=\"'bg-' + getStatusColor(true)\"></div>\n                </div>\n                <vs-input icon-no-border icon=\"icon-search\" icon-pack=\"feather\" class=\"w-full mx-5 input-rounded-full\" placeholder=\"Search or start a new chat\" v-model=\"searchQuery\"/>\n\n                <feather-icon class=\"md:inline-flex lg:hidden -ml-3 cursor-pointer\" icon=\"XIcon\" @click=\"toggleChatSidebar(false)\" />\n            </div>\n\n            <vs-divider class=\"d-theme-border-grey-light m-0\" />\n            <component :is=\"scrollbarTag\" class=\"chat-scroll-area pt-4\" :settings=\"settings\" :key=\"$vs.rtl\">\n\n                <!-- ACTIVE CHATS LIST -->\n                <div class=\"chat__chats-list mb-8\">\n                    <h3 class=\"text-primary mb-5 px-4\">Chats</h3>\n                    <ul class=\"chat__active-chats bordered-items\">\n                        <li class=\"cursor-pointer\" v-for=\"(contact, index) in chatContacts\" :key=\"index\" @click=\"updateActiveChatUser(contact.uid)\">\n                            <chat-contact showLastMsg :contact=\"contact\" :lastMessaged=\"chatLastMessaged(contact.uid).time\" :unseenMsg=\"chatUnseenMessages(contact.uid)\" :isActiveChatUser=\"isActiveChatUser(contact.uid)\"></chat-contact>\n                        </li>\n                    </ul>\n                </div>\n\n\n                <!-- CONTACTS LIST -->\n                <div class=\"chat__contacts\">\n                    <h3 class=\"text-primary mb-5 px-4\">Contacts</h3>\n                    <ul class=\"chat__contacts bordered-items\">\n                        <li class=\"cursor-pointer\" v-for=\"contact in contacts\" :key=\"contact.uid\" @click=\"updateActiveChatUser(contact.uid)\">\n                            <chat-contact :contact=\"contact\"></chat-contact>\n                        </li>\n                    </ul>\n                </div>\n            </component>\n        </vs-sidebar>\n\n        <!-- RIGHT COLUMN -->\n        <div class=\"chat__bg no-scroll-content chat-content-area border border-solid d-theme-border-grey-light border-t-0 border-r-0 border-b-0\" :class=\"{'sidebar-spacer--wide': clickNotClose, 'flex items-center justify-center': activeChatUser === null}\">\n            <template v-if=\"activeChatUser\">\n                <div class=\"chat__navbar\">\n                    <chat-navbar :isSidebarCollapsed=\"!clickNotClose\" :user-id=\"activeChatUser\" :isPinnedProp=\"isChatPinned\" @openContactsSidebar=\"toggleChatSidebar(true)\" @showProfileSidebar=\"showProfileSidebar\" @toggleIsChatPinned=\"toggleIsChatPinned\"></chat-navbar>\n                </div>\n                <component :is=\"scrollbarTag\" class=\"chat-content-scroll-area border border-solid d-theme-border-grey-light\" :settings=\"settings\" ref=\"chatLogPS\" :key=\"$vs.rtl\">\n                    <div class=\"chat__log\" ref=\"chatLog\">\n                        <chat-log :userId=\"activeChatUser\" v-if=\"activeChatUser\"></chat-log>\n                    </div>\n                </component>\n                <div class=\"chat__input flex p-4 bg-white\">\n                    <vs-input class=\"flex-1\" placeholder=\"Type Your Message\" v-model=\"typedMessage\" @keyup.enter=\"sendMsg\" />\n                    <vs-button class=\"bg-primary-gradient ml-4\" type=\"filled\" @click=\"sendMsg\">Send</vs-button>\n                </div>\n            </template>\n            <template v-else>\n                <div class=\"flex flex-col items-center\">\n                    <feather-icon icon=\"MessageSquareIcon\" class=\"mb-4 bg-white p-8 shadow-md rounded-full\" svgClasses=\"w-16 h-16\"></feather-icon>\n                    <h4 class=\" py-2 px-4 bg-white shadow-md rounded-full cursor-pointer\" @click.stop=\"toggleChatSidebar(true)\">Start Conversation</h4>\n                </div>\n            </template>\n        </div>\n    </div>\n</template>\n\n<script>\nimport ChatContact         from './ChatContact.vue'\nimport ChatLog             from './ChatLog.vue'\nimport ChatNavbar          from './ChatNavbar.vue'\nimport UserProfile         from './UserProfile.vue'\nimport VuePerfectScrollbar from 'vue-perfect-scrollbar'\nimport moduleChat          from '@/store/chat/moduleChat.js'\n\nexport default {\n  data () {\n    return {\n      active               : true,\n      isHidden             : false,\n      searchContact        : '',\n      activeProfileSidebar : false,\n      activeChatUser       : null,\n      userProfileId        : -1,\n      typedMessage         : '',\n      isChatPinned         : false,\n      settings             : {\n        maxScrollbarLength : 60,\n        wheelSpeed         : 0.70\n      },\n      clickNotClose        : true,\n      isChatSidebarActive  : true,\n      isLoggedInUserProfileView: false\n    }\n  },\n  watch: {\n    windowWidth () {\n      this.setSidebarWidth()\n    }\n  },\n  computed: {\n    chatLastMessaged () {\n      return (userId) => this.$store.getters['chat/chatLastMessaged'](userId)\n    },\n    chatUnseenMessages () {\n      return (userId) => {\n        const unseenMsg = this.$store.getters['chat/chatUnseenMessages'](userId)\n        if (unseenMsg) return unseenMsg\n      }\n    },\n    activeUser () {\n      return this.$store.state.AppActiveUser\n    },\n    getStatusColor () {\n      return (isActiveUser) => {\n        const userStatus = this.getUserStatus(isActiveUser)\n\n        if (userStatus === 'online') {\n          return 'success'\n        } else if (userStatus === 'do not disturb') {\n          return 'danger'\n        } else if (userStatus === 'away') {\n          return 'warning'\n        } else {\n          return 'grey'\n        }\n      }\n    },\n    chatContacts () {\n      return this.$store.getters['chat/chatContacts']\n    },\n    contacts () {\n      return this.$store.getters['chat/contacts']\n    },\n    searchQuery: {\n      get () {\n        return this.$store.state.chat.chatSearchQuery\n      },\n      set (val) {\n        this.$store.dispatch('chat/setChatSearchQuery', val)\n      }\n    },\n    scrollbarTag () {\n      return this.$store.getters.scrollbarTag\n    },\n    isActiveChatUser () {\n      return (userId) => userId === this.activeChatUser\n    },\n    windowWidth () {\n      return this.$store.state.windowWidth\n    }\n  },\n  methods: {\n    getUserStatus (isActiveUser) {\n      // return \"active\"\n      return isActiveUser ? this.$store.state.AppActiveUser.status : this.contacts[this.activeChatUser].status\n    },\n    closeProfileSidebar (value) {\n      this.activeProfileSidebar = value\n    },\n    updateActiveChatUser (contactId) {\n      this.activeChatUser = contactId\n      if (this.$store.getters['chat/chatDataOfUser'](this.activeChatUser)) {\n        this.$store.dispatch('chat/markSeenAllMessages', contactId)\n      }\n      const chatData = this.$store.getters['chat/chatDataOfUser'](this.activeChatUser)\n      if (chatData) this.isChatPinned = chatData.isPinned\n      else this.isChatPinned = false\n      this.toggleChatSidebar()\n      this.typedMessage = ''\n    },\n    showProfileSidebar (userId, openOnLeft = false) {\n      this.userProfileId = userId\n      this.isLoggedInUserProfileView = openOnLeft\n      this.activeProfileSidebar = !this.activeProfileSidebar\n    },\n    sendMsg () {\n      if (!this.typedMessage) return\n      const payload = {\n        'isPinned': this.isChatPinned,\n        'msg': {\n          'textContent' : this.typedMessage,\n          'time'        : String(new Date()),\n          'isSent'      : true,\n          'isSeen'      : false\n        },\n        'id': this.activeChatUser\n      }\n      this.$store.dispatch('chat/sendChatMessage', payload)\n      this.typedMessage = ''\n\n      const scroll_el = this.$refs.chatLogPS.$el || this.$refs.chatLogPS\n      scroll_el.scrollTop = this.$refs.chatLog.scrollHeight\n    },\n    toggleIsChatPinned (value) {\n      this.isChatPinned = value\n    },\n    setSidebarWidth () {\n      if (this.windowWidth < 1200) {\n        this.isChatSidebarActive = this.clickNotClose = false\n      } else {\n        this.isChatSidebarActive = this.clickNotClose = true\n      }\n    },\n    toggleChatSidebar (value = false) {\n      if (!value && this.clickNotClose) return\n      this.isChatSidebarActive = value\n    }\n  },\n  components: {\n    VuePerfectScrollbar,\n    ChatContact,\n    UserProfile,\n    ChatNavbar,\n    ChatLog\n  },\n  created () {\n    this.$store.registerModule('chat', moduleChat)\n    this.$store.dispatch('chat/fetchContacts')\n    this.$store.dispatch('chat/fetchChatContacts')\n    this.$store.dispatch('chat/fetchChats')\n    this.setSidebarWidth()\n  },\n  beforeDestroy () {\n    this.$store.unregisterModule('chat')\n  },\n  mounted () {\n    this.$store.dispatch('chat/setChatSearchQuery', '')\n  }\n}\n\n</script>\n\n\n<style lang=\"scss\">\n@import \"@/assets/scss/vuexy/apps/chat.scss\";\n</style>\n"],"sourceRoot":"src/views/apps/chat"}]}