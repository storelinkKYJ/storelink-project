{"remainingRequest":"/Users/gim-yeongjae/Desktop/storelink3-admin/node_modules/babel-loader/lib/index.js!/Users/gim-yeongjae/Desktop/storelink3-admin/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/gim-yeongjae/Desktop/storelink3-admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/gim-yeongjae/Desktop/storelink3-admin/src/views/apps/todo/TodoEdit.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/gim-yeongjae/Desktop/storelink3-admin/src/views/apps/todo/TodoEdit.vue","mtime":1610509510823},{"path":"/Users/gim-yeongjae/Desktop/storelink3-admin/node_modules/cache-loader/dist/cjs.js","mtime":1610346344693},{"path":"/Users/gim-yeongjae/Desktop/storelink3-admin/node_modules/babel-loader/lib/index.js","mtime":1610344922456},{"path":"/Users/gim-yeongjae/Desktop/storelink3-admin/node_modules/cache-loader/dist/cjs.js","mtime":1610346344693},{"path":"/Users/gim-yeongjae/Desktop/storelink3-admin/node_modules/vue-loader/lib/index.js","mtime":1610344923547}],"contextDependencies":[],"result":["import \"core-js/modules/es6.number.constructor\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  props: {\n    displayPrompt: {\n      type: Boolean,\n      required: true\n    },\n    taskId: {\n      type: Number,\n      required: true\n    }\n  },\n  data: function data() {\n    return {\n      taskLocal: Object.assign({}, this.$store.getters['todo/getTask'](this.taskId))\n    };\n  },\n  computed: {\n    activePrompt: {\n      get: function get() {\n        return this.displayPrompt;\n      },\n      set: function set(value) {\n        this.$emit('hideDisplayPrompt', value);\n      }\n    },\n    taskTags: function taskTags() {\n      return this.$store.state.todo.taskTags;\n    },\n    validateForm: function validateForm() {\n      return !this.errors.any() && this.taskLocal.title !== '';\n    }\n  },\n  methods: {\n    removeTodo: function removeTodo() {\n      var _this = this;\n\n      this.$store.dispatch('todo/updateTask', Object.assign({}, this.taskLocal, {\n        isTrashed: true\n      })).then(function () {\n        // Fetch Tasks\n        _this.$store.dispatch('todo/fetchTasks', {\n          filter: _this.$route.params.filter\n        });\n      }).catch(function (error) {\n        console.error(error);\n      });\n    },\n    init: function init() {\n      this.taskLocal = Object.assign({}, this.$store.getters['todo/getTask'](this.taskId));\n    },\n    submitTodo: function submitTodo() {\n      this.$store.dispatch('todo/updateTask', this.taskLocal);\n    }\n  }\n};",{"version":3,"sources":["TodoEdit.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmEA,eAAA;AACA,EAAA,KAAA,EAAA;AACA,IAAA,aAAA,EAAA;AACA,MAAA,IAAA,EAAA,OADA;AAEA,MAAA,QAAA,EAAA;AAFA,KADA;AAKA,IAAA,MAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,QAAA,EAAA;AAFA;AALA,GADA;AAWA,EAAA,IAXA,kBAWA;AACA,WAAA;AACA,MAAA,SAAA,EAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAA,KAAA,MAAA,CAAA,OAAA,CAAA,cAAA,EAAA,KAAA,MAAA,CAAA;AADA,KAAA;AAGA,GAfA;AAgBA,EAAA,QAAA,EAAA;AACA,IAAA,YAAA,EAAA;AACA,MAAA,GADA,iBACA;AACA,eAAA,KAAA,aAAA;AACA,OAHA;AAIA,MAAA,GAJA,eAIA,KAJA,EAIA;AACA,aAAA,KAAA,CAAA,mBAAA,EAAA,KAAA;AACA;AANA,KADA;AASA,IAAA,QATA,sBASA;AACA,aAAA,KAAA,MAAA,CAAA,KAAA,CAAA,IAAA,CAAA,QAAA;AACA,KAXA;AAYA,IAAA,YAZA,0BAYA;AACA,aAAA,CAAA,KAAA,MAAA,CAAA,GAAA,EAAA,IAAA,KAAA,SAAA,CAAA,KAAA,KAAA,EAAA;AACA;AAdA,GAhBA;AAgCA,EAAA,OAAA,EAAA;AACA,IAAA,UADA,wBACA;AAAA;;AACA,WAAA,MAAA,CAAA,QAAA,CAAA,iBAAA,EAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAA,KAAA,SAAA,EAAA;AAAA,QAAA,SAAA,EAAA;AAAA,OAAA,CAAA,EACA,IADA,CACA,YAAA;AACA;AACA,QAAA,KAAA,CAAA,MAAA,CAAA,QAAA,CAAA,iBAAA,EAAA;AAAA,UAAA,MAAA,EAAA,KAAA,CAAA,MAAA,CAAA,MAAA,CAAA;AAAA,SAAA;AACA,OAJA,EAKA,KALA,CAKA,UAAA,KAAA,EAAA;AAAA,QAAA,OAAA,CAAA,KAAA,CAAA,KAAA;AAAA,OALA;AAMA,KARA;AASA,IAAA,IATA,kBASA;AACA,WAAA,SAAA,GAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAA,KAAA,MAAA,CAAA,OAAA,CAAA,cAAA,EAAA,KAAA,MAAA,CAAA,CAAA;AACA,KAXA;AAYA,IAAA,UAZA,wBAYA;AACA,WAAA,MAAA,CAAA,QAAA,CAAA,iBAAA,EAAA,KAAA,SAAA;AACA;AAdA;AAhCA,CAAA","sourcesContent":["<!-- =========================================================================================\n    File Name: TodoEdit.vue\n    Description: Edit todo component\n    ----------------------------------------------------------------------------------------\n    Item Name: Vuexy - Vuejs, HTML & Laravel Admin Dashboard Template\n      Author: Pixinvent\n    Author URL: http://www.themeforest.net/user/pixinvent\n========================================================================================== -->\n\n\n<template>\n    <vs-prompt\n        title=\"Edit Task\"\n        accept-text= \"Submit\"\n        cancel-text = \"Remove\"\n        button-cancel = \"border\"\n        @cancel=\"removeTodo\"\n        @accept=\"submitTodo\"\n        @close=\"init\"\n        :is-valid=\"validateForm\"\n        :active.sync=\"activePrompt\">\n        <div>\n            <form>\n                <div class=\"vx-row\">\n                    <div class=\"vx-col w-1/6 self-center\">\n                        <vs-checkbox v-model=\"taskLocal.isCompleted\" class=\"w-8\"></vs-checkbox>\n                    </div>\n\n                    <div class=\"vx-col ml-auto flex\">\n                        <feather-icon\n                          icon=\"InfoIcon\"\n                          class=\"cursor-pointer\"\n                          :svgClasses=\"[{'text-success stroke-current': taskLocal.isImportant}, 'w-5', 'h-5 mr-4']\"\n                          @click.prevent=\"taskLocal.isImportant = !taskLocal.isImportant\" />\n\n                        <feather-icon\n                          icon=\"StarIcon\"\n                          class=\"cursor-pointer\"\n                          :svgClasses=\"[{'text-warning stroke-current': taskLocal.isStarred}, 'w-5', 'h-5 mr-4']\"\n                          @click.prevent=\"taskLocal.isStarred = !taskLocal.isStarred\" />\n\n                        <vs-dropdown class=\"cursor-pointer flex\" vs-custom-content>\n\n                            <feather-icon icon=\"TagIcon\" svgClasses=\"h-5 w-5\" />\n\n                            <vs-dropdown-menu style=\"z-index: 200001\">\n                                  <vs-dropdown-item @click.stop v-for=\"(tag, index) in taskTags\" :key=\"index\">\n                                      <vs-checkbox :vs-value=\"tag.value\" v-model=\"taskLocal.tags\">{{ tag.text }}</vs-checkbox>\n                                  </vs-dropdown-item>\n                            </vs-dropdown-menu>\n                        </vs-dropdown>\n                    </div>\n                </div>\n\n                <div class=\"vx-row\">\n                    <div class=\"vx-col w-full\">\n                        <vs-input v-validate=\"'required'\" name=\"title\" class=\"w-full mb-4 mt-5\" placeholder=\"Title\" v-model=\"taskLocal.title\" />\n                        <vs-textarea rows=\"5\" label=\"Add description\" v-model=\"taskLocal.desc\" />\n                    </div>\n                </div>\n\n            </form>\n        </div>\n    </vs-prompt>\n</template>\n\n<script>\nexport default {\n  props: {\n    displayPrompt: {\n      type: Boolean,\n      required: true\n    },\n    taskId: {\n      type: Number,\n      required: true\n    }\n  },\n  data () {\n    return {\n      taskLocal: Object.assign({}, this.$store.getters['todo/getTask'](this.taskId))\n    }\n  },\n  computed: {\n    activePrompt: {\n      get () {\n        return this.displayPrompt\n      },\n      set (value) {\n        this.$emit('hideDisplayPrompt', value)\n      }\n    },\n    taskTags () {\n      return this.$store.state.todo.taskTags\n    },\n    validateForm () {\n      return !this.errors.any() && this.taskLocal.title !== ''\n    }\n  },\n  methods: {\n    removeTodo () {\n      this.$store.dispatch('todo/updateTask', Object.assign({}, this.taskLocal, {isTrashed: true}))\n        .then(() => {\n          // Fetch Tasks\n          this.$store.dispatch('todo/fetchTasks', { filter: this.$route.params.filter })\n        })\n        .catch((error) => { console.error(error) })\n    },\n    init () {\n      this.taskLocal = Object.assign({}, this.$store.getters['todo/getTask'](this.taskId))\n    },\n    submitTodo () {\n      this.$store.dispatch('todo/updateTask', this.taskLocal)\n    }\n  }\n}\n</script>\n"],"sourceRoot":"src/views/apps/todo"}]}