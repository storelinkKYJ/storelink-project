{"remainingRequest":"/Users/gim-yeongjae/Desktop/storelink3-admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/gim-yeongjae/Desktop/storelink3-admin/src/components/excel/ImportExcel.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/gim-yeongjae/Desktop/storelink3-admin/src/components/excel/ImportExcel.vue","mtime":1610509510802},{"path":"/Users/gim-yeongjae/Desktop/storelink3-admin/node_modules/cache-loader/dist/cjs.js","mtime":1610346344693},{"path":"/Users/gim-yeongjae/Desktop/storelink3-admin/node_modules/babel-loader/lib/index.js","mtime":1610344922456},{"path":"/Users/gim-yeongjae/Desktop/storelink3-admin/node_modules/cache-loader/dist/cjs.js","mtime":1610346344693},{"path":"/Users/gim-yeongjae/Desktop/storelink3-admin/node_modules/vue-loader/lib/index.js","mtime":1610344923547}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport XLSX from 'xlsx'\n\nexport default {\n  props: {\n    onSuccess: {\n      type: Function,\n      required: true\n    }\n  },\n  data () {\n    return {\n      excelData: {\n        header: null,\n        results: null,\n        meta: null\n      }\n    }\n  },\n  methods: {\n    generateData ({ header, results, meta }) {\n      this.excelData.header = header\n      this.excelData.results = results\n      this.excelData.meta = meta\n      if (this.onSuccess) this.onSuccess(this.excelData)\n    },\n    getHeaderRow (sheet) {\n      const headers = []\n      const range = XLSX.utils.decode_range(sheet['!ref'])\n      let C = undefined\n      const R = range.s.r\n      /* start in the first row */\n      for (C = range.s.c; C <= range.e.c; ++C) { /* walk every column in the range */\n        const cell = sheet[XLSX.utils.encode_cell({ c: C, r: R })]\n        /* find the cell in the first row */\n        let hdr = `UNKNOWN ${  C}` // <-- replace with your desired default\n        if (cell && cell.t) hdr = XLSX.utils.format_cell(cell)\n        headers.push(hdr)\n      }\n      return headers\n    },\n    handleDragover (e) {\n      e.stopPropagation()\n      e.preventDefault()\n      e.dataTransfer.dropEffect = 'copy'\n    },\n    handleDrop (e) {\n      e.stopPropagation()\n      e.preventDefault()\n      const files = e.dataTransfer.files\n      if (files.length !== 1) {\n        this.$vs.notify({\n          title: 'Login Attempt',\n          text: 'Only support uploading one file!',\n          iconPack: 'feather',\n          icon: 'icon-alert-circle',\n          color: 'warning'\n        })\n        return\n      }\n      const rawFile = files[0] // only use files[0]\n      if (!this.isExcel(rawFile)) {\n        this.$vs.notify({\n          title: 'Login Attempt',\n          text: 'Only supports upload .xlsx, .xls, .csv suffix files',\n          iconPack: 'feather',\n          icon: 'icon-alert-circle',\n          color: 'warning'\n        })\n        return false\n      }\n      this.uploadFile(rawFile)\n    },\n    readerData (rawFile) {\n      return new Promise((resolve) => {\n        const reader = new FileReader()\n        reader.onload = e => {\n          const data = e.target.result\n          const workbook = XLSX.read(data, { type: 'array' })\n          const firstSheetName = workbook.SheetNames[0]\n          const worksheet = workbook.Sheets[firstSheetName]\n          const header = this.getHeaderRow(worksheet)\n          const results = XLSX.utils.sheet_to_json(worksheet)\n          const meta = { sheetName: firstSheetName }\n          this.generateData({ header, results, meta })\n          resolve()\n        }\n        reader.readAsArrayBuffer(rawFile)\n      })\n    },\n    handleClick (e) {\n      const files = e.target.files\n      const rawFile = files[0]\n      if (!rawFile) return\n      this.uploadFile(rawFile)\n    },\n    isExcel (file) {\n      return /\\.(xlsx|xls|csv)$/.test(file.name)\n    },\n    uploadFile (file) {\n      this.$refs['fileInput'].value = null // fix can't select the same excel\n      this.readerData(file)\n    }\n\n  }\n}\n",{"version":3,"sources":["ImportExcel.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAkfile":"ImportExcel.vue","sourceRoot":"src/components/excel","sourcesContent":["<template>\n  <div class=\"excel-import\">\n    <input type=\"file\" ref=\"fileInput\" class=\"hidden\" accept=\".xlsx, .xls\" @change=\"handleClick\">\n    <div\n      @click=\"$refs.fileInput.click()\"\n      @drop=\"handleDrop\"\n      @dragover=\"handleDragover\"\n      @dragenter=\"handleDragover\"\n      class=\"px-8 py-16 cursor-pointer text-center border-2 border-dashed d-theme-border-grey-light d-theme-dark-bg text-xl\">\n      <feather-icon icon=\"UploadCloudIcon\" svgClasses=\"h-16 w-16 stroke-current text-grey\" class=\"block\" />\n      <span>Drop Excel File or </span>\n      <span class=\"font-medium text-primary\" @click.stop=\"$refs.fileInput.click()\">Browse</span>\n      <!-- <vs-button type=\"border\" @click.stop=\"$refs.fileInput.click()\">Browse</vs-button> -->\n    </div>\n  </div>\n</template>\n\n<script>\nimport XLSX from 'xlsx'\n\nexport default {\n  props: {\n    onSuccess: {\n      type: Function,\n      required: true\n    }\n  },\n  data () {\n    return {\n      excelData: {\n        header: null,\n        results: null,\n        meta: null\n      }\n    }\n  },\n  methods: {\n    generateData ({ header, results, meta }) {\n      this.excelData.header = header\n      this.excelData.results = results\n      this.excelData.meta = meta\n      if (this.onSuccess) this.onSuccess(this.excelData)\n    },\n    getHeaderRow (sheet) {\n      const headers = []\n      const range = XLSX.utils.decode_range(sheet['!ref'])\n      let C = undefined\n      const R = range.s.r\n      /* start in the first row */\n      for (C = range.s.c; C <= range.e.c; ++C) { /* walk every column in the range */\n        const cell = sheet[XLSX.utils.encode_cell({ c: C, r: R })]\n        /* find the cell in the first row */\n        let hdr = `UNKNOWN ${  C}` // <-- replace with your desired default\n        if (cell && cell.t) hdr = XLSX.utils.format_cell(cell)\n        headers.push(hdr)\n      }\n      return headers\n    },\n    handleDragover (e) {\n      e.stopPropagation()\n      e.preventDefault()\n      e.dataTransfer.dropEffect = 'copy'\n    },\n    handleDrop (e) {\n      e.stopPropagation()\n      e.preventDefault()\n      const files = e.dataTransfer.files\n      if (files.length !== 1) {\n        this.$vs.notify({\n          title: 'Login Attempt',\n          text: 'Only support uploading one file!',\n          iconPack: 'feather',\n          icon: 'icon-alert-circle',\n          color: 'warning'\n        })\n        return\n      }\n      const rawFile = files[0] // only use files[0]\n      if (!this.isExcel(rawFile)) {\n        this.$vs.notify({\n          title: 'Login Attempt',\n          text: 'Only supports upload .xlsx, .xls, .csv suffix files',\n          iconPack: 'feather',\n          icon: 'icon-alert-circle',\n          color: 'warning'\n        })\n        return false\n      }\n      this.uploadFile(rawFile)\n    },\n    readerData (rawFile) {\n      return new Promise((resolve) => {\n        const reader = new FileReader()\n        reader.onload = e => {\n          const data = e.target.result\n          const workbook = XLSX.read(data, { type: 'array' })\n          const firstSheetName = workbook.SheetNames[0]\n          const worksheet = workbook.Sheets[firstSheetName]\n          const header = this.getHeaderRow(worksheet)\n          const results = XLSX.utils.sheet_to_json(worksheet)\n          const meta = { sheetName: firstSheetName }\n          this.generateData({ header, results, meta })\n          resolve()\n        }\n        reader.readAsArrayBuffer(rawFile)\n      })\n    },\n    handleClick (e) {\n      const files = e.target.files\n      const rawFile = files[0]\n      if (!rawFile) return\n      this.uploadFile(rawFile)\n    },\n    isExcel (file) {\n      return /\\.(xlsx|xls|csv)$/.test(file.name)\n    },\n    uploadFile (file) {\n      this.$refs['fileInput'].value = null // fix can't select the same excel\n      this.readerData(file)\n    }\n\n  }\n}\n</script>\n"]}]}