{"remainingRequest":"/Users/gim-yeongjae/Desktop/storelink3-admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/gim-yeongjae/Desktop/storelink3-admin/src/views/apps/todo/TodoEdit.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/gim-yeongjae/Desktop/storelink3-admin/src/views/apps/todo/TodoEdit.vue","mtime":1610509510823},{"path":"/Users/gim-yeongjae/Desktop/storelink3-admin/node_modules/cache-loader/dist/cjs.js","mtime":1610346344693},{"path":"/Users/gim-yeongjae/Desktop/storelink3-admin/node_modules/thread-loader/dist/cjs.js","mtime":1610344922450},{"path":"/Users/gim-yeongjae/Desktop/storelink3-admin/node_modules/babel-loader/lib/index.js","mtime":1610344922456},{"path":"/Users/gim-yeongjae/Desktop/storelink3-admin/node_modules/cache-loader/dist/cjs.js","mtime":1610346344693},{"path":"/Users/gim-yeongjae/Desktop/storelink3-admin/node_modules/vue-loader/lib/index.js","mtime":1610344923547}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexport default {\n  props: {\n    displayPrompt: {\n      type: Boolean,\n      required: true\n    },\n    taskId: {\n      type: Number,\n      required: true\n    }\n  },\n  data () {\n    return {\n      taskLocal: Object.assign({}, this.$store.getters['todo/getTask'](this.taskId))\n    }\n  },\n  computed: {\n    activePrompt: {\n      get () {\n        return this.displayPrompt\n      },\n      set (value) {\n        this.$emit('hideDisplayPrompt', value)\n      }\n    },\n    taskTags () {\n      return this.$store.state.todo.taskTags\n    },\n    validateForm () {\n      return !this.errors.any() && this.taskLocal.title !== ''\n    }\n  },\n  methods: {\n    removeTodo () {\n      this.$store.dispatch('todo/updateTask', Object.assign({}, this.taskLocal, {isTrashed: true}))\n        .then(() => {\n          // Fetch Tasks\n          this.$store.dispatch('todo/fetchTasks', { filter: this.$route.params.filter })\n        })\n        .catch((error) => { console.error(error) })\n    },\n    init () {\n      this.taskLocal = Object.assign({}, this.$store.getters['todo/getTask'](this.taskId))\n    },\n    submitTodo () {\n      this.$store.dispatch('todo/updateTask', this.taskLocal)\n    }\n  }\n}\n",{"version":3,"sources":["TodoEdit.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"TodoEdit.vue","sourceRoot":"src/views/apps/todo","sourcesContent":["<!-- =========================================================================================\n    File Name: TodoEdit.vue\n    Description: Edit todo component\n    ----------------------------------------------------------------------------------------\n    Item Name: Vuexy - Vuejs, HTML & Laravel Admin Dashboard Template\n      Author: Pixinvent\n    Author URL: http://www.themeforest.net/user/pixinvent\n========================================================================================== -->\n\n\n<template>\n    <vs-prompt\n        title=\"Edit Task\"\n        accept-text= \"Submit\"\n        cancel-text = \"Remove\"\n        button-cancel = \"border\"\n        @cancel=\"removeTodo\"\n        @accept=\"submitTodo\"\n        @close=\"init\"\n        :is-valid=\"validateForm\"\n        :active.sync=\"activePrompt\">\n        <div>\n            <form>\n                <div class=\"vx-row\">\n                    <div class=\"vx-col w-1/6 self-center\">\n                        <vs-checkbox v-model=\"taskLocal.isCompleted\" class=\"w-8\"></vs-checkbox>\n                    </div>\n\n                    <div class=\"vx-col ml-auto flex\">\n                        <feather-icon\n                          icon=\"InfoIcon\"\n                          class=\"cursor-pointer\"\n                          :svgClasses=\"[{'text-success stroke-current': taskLocal.isImportant}, 'w-5', 'h-5 mr-4']\"\n                          @click.prevent=\"taskLocal.isImportant = !taskLocal.isImportant\" />\n\n                        <feather-icon\n                          icon=\"StarIcon\"\n                          class=\"cursor-pointer\"\n                          :svgClasses=\"[{'text-warning stroke-current': taskLocal.isStarred}, 'w-5', 'h-5 mr-4']\"\n                          @click.prevent=\"taskLocal.isStarred = !taskLocal.isStarred\" />\n\n                        <vs-dropdown class=\"cursor-pointer flex\" vs-custom-content>\n\n                            <feather-icon icon=\"TagIcon\" svgClasses=\"h-5 w-5\" />\n\n                            <vs-dropdown-menu style=\"z-index: 200001\">\n                                  <vs-dropdown-item @click.stop v-for=\"(tag, index) in taskTags\" :key=\"index\">\n                                      <vs-checkbox :vs-value=\"tag.value\" v-model=\"taskLocal.tags\">{{ tag.text }}</vs-checkbox>\n                                  </vs-dropdown-item>\n                            </vs-dropdown-menu>\n                        </vs-dropdown>\n                    </div>\n                </div>\n\n                <div class=\"vx-row\">\n                    <div class=\"vx-col w-full\">\n                        <vs-input v-validate=\"'required'\" name=\"title\" class=\"w-full mb-4 mt-5\" placeholder=\"Title\" v-model=\"taskLocal.title\" />\n                        <vs-textarea rows=\"5\" label=\"Add description\" v-model=\"taskLocal.desc\" />\n                    </div>\n                </div>\n\n            </form>\n        </div>\n    </vs-prompt>\n</template>\n\n<script>\nexport default {\n  props: {\n    displayPrompt: {\n      type: Boolean,\n      required: true\n    },\n    taskId: {\n      type: Number,\n      required: true\n    }\n  },\n  data () {\n    return {\n      taskLocal: Object.assign({}, this.$store.getters['todo/getTask'](this.taskId))\n    }\n  },\n  computed: {\n    activePrompt: {\n      get () {\n        return this.displayPrompt\n      },\n      set (value) {\n        this.$emit('hideDisplayPrompt', value)\n      }\n    },\n    taskTags () {\n      return this.$store.state.todo.taskTags\n    },\n    validateForm () {\n      return !this.errors.any() && this.taskLocal.title !== ''\n    }\n  },\n  methods: {\n    removeTodo () {\n      this.$store.dispatch('todo/updateTask', Object.assign({}, this.taskLocal, {isTrashed: true}))\n        .then(() => {\n          // Fetch Tasks\n          this.$store.dispatch('todo/fetchTasks', { filter: this.$route.params.filter })\n        })\n        .catch((error) => { console.error(error) })\n    },\n    init () {\n      this.taskLocal = Object.assign({}, this.$store.getters['todo/getTask'](this.taskId))\n    },\n    submitTodo () {\n      this.$store.dispatch('todo/updateTask', this.taskLocal)\n    }\n  }\n}\n</script>\n"]}]}