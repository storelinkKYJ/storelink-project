{"remainingRequest":"/Users/gim-yeongjae/Desktop/storelink3-admin/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/gim-yeongjae/Desktop/storelink3-admin/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/gim-yeongjae/Desktop/storelink3-admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/gim-yeongjae/Desktop/storelink3-admin/src/views/forms/form-validation/FormValidationTypes.vue?vue&type=template&id=8d2808f6&","dependencies":[{"path":"/Users/gim-yeongjae/Desktop/storelink3-admin/src/views/forms/form-validation/FormValidationTypes.vue","mtime":1610509510876},{"path":"/Users/gim-yeongjae/Desktop/storelink3-admin/node_modules/cache-loader/dist/cjs.js","mtime":1610346344693},{"path":"/Users/gim-yeongjae/Desktop/storelink3-admin/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1610344923547},{"path":"/Users/gim-yeongjae/Desktop/storelink3-admin/node_modules/cache-loader/dist/cjs.js","mtime":1610346344693},{"path":"/Users/gim-yeongjae/Desktop/storelink3-admin/node_modules/vue-loader/lib/index.js","mtime":1610344923547}],"contextDependencies":[],"result":["var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"vx-card\",\n    { attrs: { title: \"Validation types\", \"code-toggler\": \"\" } },\n    [\n      _c(\"p\", [\n        _vm._v(\n          \"VeeValidate comes with a bunch of validation rules out of the box and cover most validation needs\"\n        )\n      ]),\n      _c(\"div\", { staticClass: \"mt-5\" }, [\n        _c(\n          \"form\",\n          [\n            _c(\"div\", { staticClass: \"vx-row\" }, [\n              _c(\n                \"div\",\n                { staticClass: \"vx-col w-1/2\" },\n                [\n                  _c(\"vs-input\", {\n                    directives: [\n                      {\n                        name: \"validate\",\n                        rawName: \"v-validate\",\n                        value: \"required\",\n                        expression: \"'required'\"\n                      }\n                    ],\n                    staticClass: \"mt-5 w-full\",\n                    attrs: {\n                      label: \"This field is required\",\n                      name: \"required\"\n                    },\n                    model: {\n                      value: _vm.required,\n                      callback: function($$v) {\n                        _vm.required = $$v\n                      },\n                      expression: \"required\"\n                    }\n                  }),\n                  _c(\n                    \"span\",\n                    {\n                      directives: [\n                        {\n                          name: \"show\",\n                          rawName: \"v-show\",\n                          value: _vm.errors.has(\"required\"),\n                          expression: \"errors.has('required')\"\n                        }\n                      ],\n                      staticClass: \"text-danger text-sm\"\n                    },\n                    [_vm._v(_vm._s(_vm.errors.first(\"required\")))]\n                  )\n                ],\n                1\n              ),\n              _c(\n                \"div\",\n                { staticClass: \"vx-col w-1/2\" },\n                [\n                  _c(\"vs-input\", {\n                    directives: [\n                      {\n                        name: \"validate\",\n                        rawName: \"v-validate\",\n                        value: \"alpha\",\n                        expression: \"'alpha'\"\n                      }\n                    ],\n                    staticClass: \"mt-5 w-full\",\n                    attrs: {\n                      label: \"Only alphabetic characters\",\n                      name: \"alpha\"\n                    },\n                    model: {\n                      value: _vm.alpha,\n                      callback: function($$v) {\n                        _vm.alpha = $$v\n                      },\n                      expression: \"alpha\"\n                    }\n                  }),\n                  _c(\n                    \"span\",\n                    {\n                      directives: [\n                        {\n                          name: \"show\",\n                          rawName: \"v-show\",\n                          value: _vm.errors.has(\"alpha\"),\n                          expression: \"errors.has('alpha')\"\n                        }\n                      ],\n                      staticClass: \"text-danger text-sm\"\n                    },\n                    [_vm._v(_vm._s(_vm.errors.first(\"alpha\")))]\n                  )\n                ],\n                1\n              ),\n              _c(\n                \"div\",\n                { staticClass: \"vx-col w-1/2\" },\n                [\n                  _c(\"vs-input\", {\n                    directives: [\n                      {\n                        name: \"validate\",\n                        rawName: \"v-validate\",\n                        value: \"alpha_dash\",\n                        expression: \"'alpha_dash'\"\n                      }\n                    ],\n                    staticClass: \"mt-5 w-full\",\n                    attrs: {\n                      label:\n                        \"Only alphabetic characters, numbers, dashes or underscores\",\n                      name: \"alpha_dash\"\n                    },\n                    model: {\n                      value: _vm.alpha_dash,\n                      callback: function($$v) {\n                        _vm.alpha_dash = $$v\n                      },\n                      expression: \"alpha_dash\"\n                    }\n                  }),\n                  _c(\n                    \"span\",\n                    {\n                      directives: [\n                        {\n                          name: \"show\",\n                          rawName: \"v-show\",\n                          value: _vm.errors.has(\"alpha_dash\"),\n                          expression: \"errors.has('alpha_dash')\"\n                        }\n                      ],\n                      staticClass: \"text-danger text-sm\"\n                    },\n                    [_vm._v(_vm._s(_vm.errors.first(\"alpha_dash\")))]\n                  )\n                ],\n                1\n              ),\n              _c(\n                \"div\",\n                { staticClass: \"vx-col w-1/2\" },\n                [\n                  _c(\"vs-input\", {\n                    directives: [\n                      {\n                        name: \"validate\",\n                        rawName: \"v-validate\",\n                        value: \"alpha_num\",\n                        expression: \"'alpha_num'\"\n                      }\n                    ],\n                    staticClass: \"mt-5 w-full\",\n                    attrs: {\n                      label: \"May contain alphabetic characters or numbers\",\n                      name: \"alpha_num\"\n                    },\n                    model: {\n                      value: _vm.alpha_num,\n                      callback: function($$v) {\n                        _vm.alpha_num = $$v\n                      },\n                      expression: \"alpha_num\"\n                    }\n                  }),\n                  _c(\n                    \"span\",\n                    {\n                      directives: [\n                        {\n                          name: \"show\",\n                          rawName: \"v-show\",\n                          value: _vm.errors.has(\"alpha_num\"),\n                          expression: \"errors.has('alpha_num')\"\n                        }\n                      ],\n                      staticClass: \"text-danger text-sm\"\n                    },\n                    [_vm._v(_vm._s(_vm.errors.first(\"alpha_num\")))]\n                  )\n                ],\n                1\n              ),\n              _c(\n                \"div\",\n                { staticClass: \"vx-col w-1/2\" },\n                [\n                  _c(\"vs-input\", {\n                    directives: [\n                      {\n                        name: \"validate\",\n                        rawName: \"v-validate\",\n                        value: \"numeric\",\n                        expression: \"'numeric'\"\n                      }\n                    ],\n                    staticClass: \"mt-5 w-full\",\n                    attrs: {\n                      label: \"Must only consist of numbers\",\n                      name: \"numeric\"\n                    },\n                    model: {\n                      value: _vm.numeric,\n                      callback: function($$v) {\n                        _vm.numeric = $$v\n                      },\n                      expression: \"numeric\"\n                    }\n                  }),\n                  _c(\n                    \"span\",\n                    {\n                      directives: [\n                        {\n                          name: \"show\",\n                          rawName: \"v-show\",\n                          value: _vm.errors.has(\"numeric\"),\n                          expression: \"errors.has('numeric')\"\n                        }\n                      ],\n                      staticClass: \"text-danger text-sm\"\n                    },\n                    [_vm._v(_vm._s(_vm.errors.first(\"numeric\")))]\n                  )\n                ],\n                1\n              ),\n              _c(\n                \"div\",\n                { staticClass: \"vx-col w-1/2\" },\n                [\n                  _c(\"vs-input\", {\n                    directives: [\n                      {\n                        name: \"validate\",\n                        rawName: \"v-validate\",\n                        value: \"alpha_spaces\",\n                        expression: \"'alpha_spaces'\"\n                      }\n                    ],\n                    staticClass: \"mt-5 w-full\",\n                    attrs: {\n                      label: \"Only alphabetic characters or spaces\",\n                      name: \"alpha_spaces\"\n                    },\n                    model: {\n                      value: _vm.alpha_spaces,\n                      callback: function($$v) {\n                        _vm.alpha_spaces = $$v\n                      },\n                      expression: \"alpha_spaces\"\n                    }\n                  }),\n                  _c(\n                    \"span\",\n                    {\n                      directives: [\n                        {\n                          name: \"show\",\n                          rawName: \"v-show\",\n                          value: _vm.errors.has(\"alpha_spaces\"),\n                          expression: \"errors.has('alpha_spaces')\"\n                        }\n                      ],\n                      staticClass: \"text-danger text-sm\"\n                    },\n                    [_vm._v(_vm._s(_vm.errors.first(\"alpha_spaces\")))]\n                  )\n                ],\n                1\n              ),\n              _c(\n                \"div\",\n                { staticClass: \"vx-col w-1/2\" },\n                [\n                  _c(\"vs-input\", {\n                    directives: [\n                      {\n                        name: \"validate\",\n                        rawName: \"v-validate\",\n                        value: \"email\",\n                        expression: \"'email'\"\n                      }\n                    ],\n                    staticClass: \"mt-5 w-full\",\n                    attrs: { label: \"Must be a valid email\", name: \"email\" },\n                    model: {\n                      value: _vm.email,\n                      callback: function($$v) {\n                        _vm.email = $$v\n                      },\n                      expression: \"email\"\n                    }\n                  }),\n                  _c(\n                    \"span\",\n                    {\n                      directives: [\n                        {\n                          name: \"show\",\n                          rawName: \"v-show\",\n                          value: _vm.errors.has(\"email\"),\n                          expression: \"errors.has('email')\"\n                        }\n                      ],\n                      staticClass: \"text-danger text-sm\"\n                    },\n                    [_vm._v(_vm._s(_vm.errors.first(\"email\")))]\n                  )\n                ],\n                1\n              ),\n              _c(\n                \"div\",\n                { staticClass: \"vx-col w-1/2\" },\n                [\n                  _c(\"vs-input\", {\n                    directives: [\n                      {\n                        name: \"validate\",\n                        rawName: \"v-validate\",\n                        value: \"url:require_protocol\",\n                        expression: \"'url:require_protocol'\"\n                      }\n                    ],\n                    staticClass: \"mt-5 w-full\",\n                    attrs: {\n                      \"data-vv-as\": \"field\",\n                      label: \"Must be a valid url\",\n                      name: \"url\"\n                    },\n                    model: {\n                      value: _vm.url,\n                      callback: function($$v) {\n                        _vm.url = $$v\n                      },\n                      expression: \"url\"\n                    }\n                  }),\n                  _c(\n                    \"span\",\n                    {\n                      directives: [\n                        {\n                          name: \"show\",\n                          rawName: \"v-show\",\n                          value: _vm.errors.has(\"url\"),\n                          expression: \"errors.has('url')\"\n                        }\n                      ],\n                      staticClass: \"text-danger text-sm\"\n                    },\n                    [_vm._v(_vm._s(_vm.errors.first(\"url\")))]\n                  )\n                ],\n                1\n              ),\n              _c(\n                \"div\",\n                { staticClass: \"vx-col w-1/2\" },\n                [\n                  _c(\"vs-input\", {\n                    directives: [\n                      {\n                        name: \"validate\",\n                        rawName: \"v-validate\",\n                        value: \"min:3\",\n                        expression: \"'min:3'\"\n                      }\n                    ],\n                    staticClass: \"mt-5 w-full\",\n                    attrs: {\n                      label:\n                        \"Length should not be less than the specified length : 3\",\n                      name: \"min\"\n                    },\n                    model: {\n                      value: _vm.min,\n                      callback: function($$v) {\n                        _vm.min = $$v\n                      },\n                      expression: \"min\"\n                    }\n                  }),\n                  _c(\n                    \"span\",\n                    {\n                      directives: [\n                        {\n                          name: \"show\",\n                          rawName: \"v-show\",\n                          value: _vm.errors.has(\"min\"),\n                          expression: \"errors.has('min')\"\n                        }\n                      ],\n                      staticClass: \"text-danger text-sm\"\n                    },\n                    [_vm._v(_vm._s(_vm.errors.first(\"min\")))]\n                  )\n                ],\n                1\n              ),\n              _c(\n                \"div\",\n                { staticClass: \"vx-col w-1/2\" },\n                [\n                  _c(\"vs-input\", {\n                    directives: [\n                      {\n                        name: \"validate\",\n                        rawName: \"v-validate\",\n                        value: \"max:6\",\n                        expression: \"'max:6'\"\n                      }\n                    ],\n                    staticClass: \"mt-5 w-full\",\n                    attrs: {\n                      label: \"Length may not exceed the specified length : 6\",\n                      name: \"max\"\n                    },\n                    model: {\n                      value: _vm.max,\n                      callback: function($$v) {\n                        _vm.max = $$v\n                      },\n                      expression: \"max\"\n                    }\n                  }),\n                  _c(\n                    \"span\",\n                    {\n                      directives: [\n                        {\n                          name: \"show\",\n                          rawName: \"v-show\",\n                          value: _vm.errors.has(\"max\"),\n                          expression: \"errors.has('max')\"\n                        }\n                      ],\n                      staticClass: \"text-danger text-sm\"\n                    },\n                    [_vm._v(_vm._s(_vm.errors.first(\"max\")))]\n                  )\n                ],\n                1\n              ),\n              _c(\n                \"div\",\n                { staticClass: \"vx-col w-1/2\" },\n                [\n                  _c(\"vs-input\", {\n                    directives: [\n                      {\n                        name: \"validate\",\n                        rawName: \"v-validate\",\n                        value: \"min:6|max:10\",\n                        expression: \"'min:6|max:10'\"\n                      }\n                    ],\n                    ref: \"password\",\n                    staticClass: \"mt-5 w-full\",\n                    attrs: {\n                      type: \"password\",\n                      label: \"Password 1\",\n                      name: \"password\"\n                    },\n                    model: {\n                      value: _vm.password,\n                      callback: function($$v) {\n                        _vm.password = $$v\n                      },\n                      expression: \"password\"\n                    }\n                  }),\n                  _c(\n                    \"span\",\n                    {\n                      directives: [\n                        {\n                          name: \"show\",\n                          rawName: \"v-show\",\n                          value: _vm.errors.has(\"password\"),\n                          expression: \"errors.has('password')\"\n                        }\n                      ],\n                      staticClass: \"text-danger text-sm\"\n                    },\n                    [_vm._v(_vm._s(_vm.errors.first(\"password\")))]\n                  )\n                ],\n                1\n              ),\n              _c(\n                \"div\",\n                { staticClass: \"vx-col w-1/2\" },\n                [\n                  _c(\"vs-input\", {\n                    directives: [\n                      {\n                        name: \"validate\",\n                        rawName: \"v-validate\",\n                        value: \"min:6|max:10|confirmed:password\",\n                        expression: \"'min:6|max:10|confirmed:password'\"\n                      }\n                    ],\n                    staticClass: \"mt-5 w-full\",\n                    attrs: {\n                      type: \"password\",\n                      label: \"Confirm Password\",\n                      name: \"confirm_password\",\n                      \"data-vv-as\": \"password\"\n                    },\n                    model: {\n                      value: _vm.confirm_password,\n                      callback: function($$v) {\n                        _vm.confirm_password = $$v\n                      },\n                      expression: \"confirm_password\"\n                    }\n                  }),\n                  _c(\n                    \"span\",\n                    {\n                      directives: [\n                        {\n                          name: \"show\",\n                          rawName: \"v-show\",\n                          value: _vm.errors.has(\"confirm_password\"),\n                          expression: \"errors.has('confirm_password')\"\n                        }\n                      ],\n                      staticClass: \"text-danger text-sm\"\n                    },\n                    [_vm._v(_vm._s(_vm.errors.first(\"confirm_password\")))]\n                  )\n                ],\n                1\n              ),\n              _c(\n                \"div\",\n                { staticClass: \"vx-col w-1/2\" },\n                [\n                  _c(\"vs-input\", {\n                    directives: [\n                      {\n                        name: \"validate\",\n                        rawName: \"v-validate\",\n                        value: \"date_format:dd/MM/yyyy\",\n                        expression: \"'date_format:dd/MM/yyyy'\"\n                      }\n                    ],\n                    staticClass: \"mt-5 w-full\",\n                    attrs: {\n                      label: \"Date Format: dd/MM/yyyy\",\n                      name: \"date_format\"\n                    },\n                    model: {\n                      value: _vm.date_format,\n                      callback: function($$v) {\n                        _vm.date_format = $$v\n                      },\n                      expression: \"date_format\"\n                    }\n                  }),\n                  _c(\n                    \"span\",\n                    {\n                      directives: [\n                        {\n                          name: \"show\",\n                          rawName: \"v-show\",\n                          value: _vm.errors.has(\"date_format\"),\n                          expression: \"errors.has('date_format')\"\n                        }\n                      ],\n                      staticClass: \"text-danger text-sm\"\n                    },\n                    [_vm._v(_vm._s(_vm.errors.first(\"date_format\")))]\n                  )\n                ],\n                1\n              ),\n              _c(\n                \"div\",\n                { staticClass: \"vx-col w-1/2\" },\n                [\n                  _c(\"vs-input\", {\n                    directives: [\n                      {\n                        name: \"validate\",\n                        rawName: \"v-validate\",\n                        value: \"between:1,11\",\n                        expression: \"'between:1,11'\"\n                      }\n                    ],\n                    staticClass: \"mt-5 w-full\",\n                    attrs: {\n                      label:\n                        \"Numeric value between minimum value and a maximum value : 1 and 11\",\n                      name: \"between\"\n                    },\n                    model: {\n                      value: _vm.between,\n                      callback: function($$v) {\n                        _vm.between = $$v\n                      },\n                      expression: \"between\"\n                    }\n                  }),\n                  _c(\n                    \"span\",\n                    {\n                      directives: [\n                        {\n                          name: \"show\",\n                          rawName: \"v-show\",\n                          value: _vm.errors.has(\"between\"),\n                          expression: \"errors.has('between')\"\n                        }\n                      ],\n                      staticClass: \"text-danger text-sm\"\n                    },\n                    [_vm._v(_vm._s(_vm.errors.first(\"between\")))]\n                  )\n                ],\n                1\n              ),\n              _c(\n                \"div\",\n                { staticClass: \"vx-col w-1/2\" },\n                [\n                  _c(\"vs-input\", {\n                    directives: [\n                      {\n                        name: \"validate\",\n                        rawName: \"v-validate\",\n                        value: \"credit_card\",\n                        expression: \"'credit_card'\"\n                      }\n                    ],\n                    staticClass: \"mt-5 w-full\",\n                    attrs: { label: \"Valid credit card\", name: \"credit_card\" },\n                    model: {\n                      value: _vm.credit_card,\n                      callback: function($$v) {\n                        _vm.credit_card = $$v\n                      },\n                      expression: \"credit_card\"\n                    }\n                  }),\n                  _c(\n                    \"span\",\n                    {\n                      directives: [\n                        {\n                          name: \"show\",\n                          rawName: \"v-show\",\n                          value: _vm.errors.has(\"credit_card\"),\n                          expression: \"errors.has('credit_card')\"\n                        }\n                      ],\n                      staticClass: \"text-danger text-sm\"\n                    },\n                    [_vm._v(_vm._s(_vm.errors.first(\"credit_card\")))]\n                  )\n                ],\n                1\n              ),\n              _c(\n                \"div\",\n                { staticClass: \"vx-col w-1/2\" },\n                [\n                  _c(\"vs-input\", {\n                    directives: [\n                      {\n                        name: \"validate\",\n                        rawName: \"v-validate\",\n                        value:\n                          \"date_format:dd/MM/yyyy|date_between:10/09/2016,20/09/2016\",\n                        expression:\n                          \"'date_format:dd/MM/yyyy|date_between:10/09/2016,20/09/2016'\"\n                      }\n                    ],\n                    staticClass: \"mt-5 w-full\",\n                    attrs: {\n                      label:\n                        \"Must be a valid date between the two dates specified : 10/09/2016 - 20/09/2016\",\n                      name: \"date_between\"\n                    },\n                    model: {\n                      value: _vm.date_between,\n                      callback: function($$v) {\n                        _vm.date_between = $$v\n                      },\n                      expression: \"date_between\"\n                    }\n                  }),\n                  _c(\n                    \"span\",\n                    {\n                      directives: [\n                        {\n                          name: \"show\",\n                          rawName: \"v-show\",\n                          value: _vm.errors.has(\"date_between\"),\n                          expression: \"errors.has('date_between')\"\n                        }\n                      ],\n                      staticClass: \"text-danger text-sm\"\n                    },\n                    [_vm._v(_vm._s(_vm.errors.first(\"date_between\")))]\n                  )\n                ],\n                1\n              ),\n              _c(\n                \"div\",\n                { staticClass: \"vx-col w-1/2\" },\n                [\n                  _c(\"vs-input\", {\n                    directives: [\n                      {\n                        name: \"validate\",\n                        rawName: \"v-validate\",\n                        value: \"digits:3\",\n                        expression: \"'digits:3'\"\n                      }\n                    ],\n                    staticClass: \"mt-5 w-full\",\n                    attrs: {\n                      label:\n                        \"Must be numeric and have the specified number of digits : 3\",\n                      name: \"digits\"\n                    },\n                    model: {\n                      value: _vm.digits,\n                      callback: function($$v) {\n                        _vm.digits = $$v\n                      },\n                      expression: \"digits\"\n                    }\n                  }),\n                  _c(\n                    \"span\",\n                    {\n                      directives: [\n                        {\n                          name: \"show\",\n                          rawName: \"v-show\",\n                          value: _vm.errors.has(\"digits\"),\n                          expression: \"errors.has('digits')\"\n                        }\n                      ],\n                      staticClass: \"text-danger text-sm\"\n                    },\n                    [_vm._v(_vm._s(_vm.errors.first(\"digits\")))]\n                  )\n                ],\n                1\n              ),\n              _c(\n                \"div\",\n                { staticClass: \"vx-col w-1/2\" },\n                [\n                  _c(\n                    \"vs-select\",\n                    {\n                      directives: [\n                        {\n                          name: \"validate\",\n                          rawName: \"v-validate\",\n                          value: \"included:1,3\",\n                          expression: \"'included:1,3'\"\n                        }\n                      ],\n                      staticClass: \"select-large mt-5 w-full\",\n                      attrs: {\n                        name: \"included\",\n                        label:\n                          \"Must have a value that is in the specified list : 1 or 3\"\n                      },\n                      model: {\n                        value: _vm.select1,\n                        callback: function($$v) {\n                          _vm.select1 = $$v\n                        },\n                        expression: \"select1\"\n                      }\n                    },\n                    _vm._l(_vm.options1, function(item, index) {\n                      return _c(\"vs-select-item\", {\n                        key: index,\n                        attrs: { value: item.value, text: item.text }\n                      })\n                    }),\n                    1\n                  ),\n                  _c(\n                    \"span\",\n                    {\n                      directives: [\n                        {\n                          name: \"show\",\n                          rawName: \"v-show\",\n                          value: _vm.errors.has(\"included\"),\n                          expression: \"errors.has('included')\"\n                        }\n                      ],\n                      staticClass: \"text-danger text-sm\"\n                    },\n                    [_vm._v(_vm._s(_vm.errors.first(\"included\")))]\n                  )\n                ],\n                1\n              ),\n              _c(\n                \"div\",\n                { staticClass: \"vx-col w-1/2\" },\n                [\n                  _c(\"vs-input\", {\n                    directives: [\n                      {\n                        name: \"validate\",\n                        rawName: \"v-validate\",\n                        value: \"max_value:100\",\n                        expression: \"'max_value:100'\"\n                      }\n                    ],\n                    staticClass: \"mt-5 w-full\",\n                    attrs: {\n                      label:\n                        \"Numeric value and must not be greater than the specified value : 100\",\n                      name: \"max_value\"\n                    },\n                    model: {\n                      value: _vm.max_value,\n                      callback: function($$v) {\n                        _vm.max_value = $$v\n                      },\n                      expression: \"max_value\"\n                    }\n                  }),\n                  _c(\n                    \"span\",\n                    {\n                      directives: [\n                        {\n                          name: \"show\",\n                          rawName: \"v-show\",\n                          value: _vm.errors.has(\"max_value\"),\n                          expression: \"errors.has('max_value')\"\n                        }\n                      ],\n                      staticClass: \"text-danger text-sm\"\n                    },\n                    [_vm._v(_vm._s(_vm.errors.first(\"max_value\")))]\n                  )\n                ],\n                1\n              ),\n              _c(\n                \"div\",\n                { staticClass: \"vx-col w-1/2\" },\n                [\n                  _c(\"vs-input\", {\n                    directives: [\n                      {\n                        name: \"validate\",\n                        rawName: \"v-validate\",\n                        value: \"min_value:10\",\n                        expression: \"'min_value:10'\"\n                      }\n                    ],\n                    staticClass: \"mt-5 w-full\",\n                    attrs: {\n                      label:\n                        \"Numeric value and must not be less than the specified value : 10\",\n                      name: \"min_value\"\n                    },\n                    model: {\n                      value: _vm.min_value,\n                      callback: function($$v) {\n                        _vm.min_value = $$v\n                      },\n                      expression: \"min_value\"\n                    }\n                  }),\n                  _c(\n                    \"span\",\n                    {\n                      directives: [\n                        {\n                          name: \"show\",\n                          rawName: \"v-show\",\n                          value: _vm.errors.has(\"min_value\"),\n                          expression: \"errors.has('min_value')\"\n                        }\n                      ],\n                      staticClass: \"text-danger text-sm\"\n                    },\n                    [_vm._v(_vm._s(_vm.errors.first(\"min_value\")))]\n                  )\n                ],\n                1\n              ),\n              _c(\n                \"div\",\n                { staticClass: \"vx-col w-full\" },\n                [\n                  _c(\"vs-input\", {\n                    directives: [\n                      {\n                        name: \"validate\",\n                        rawName: \"v-validate\",\n                        value: { regex: \"^([0-9]+)$\" },\n                        expression: \"{regex: '^([0-9]+)$' }\"\n                      }\n                    ],\n                    staticClass: \"mt-5 w-full\",\n                    attrs: {\n                      label:\n                        \"Must match the specified regular expression : ^([0-9]+)$ - numbers only\",\n                      name: \"regex\"\n                    },\n                    model: {\n                      value: _vm.regex,\n                      callback: function($$v) {\n                        _vm.regex = $$v\n                      },\n                      expression: \"regex\"\n                    }\n                  }),\n                  _c(\n                    \"span\",\n                    {\n                      directives: [\n                        {\n                          name: \"show\",\n                          rawName: \"v-show\",\n                          value: _vm.errors.has(\"regex\"),\n                          expression: \"errors.has('regex')\"\n                        }\n                      ],\n                      staticClass: \"text-danger text-sm\"\n                    },\n                    [_vm._v(_vm._s(_vm.errors.first(\"regex\")))]\n                  )\n                ],\n                1\n              )\n            ]),\n            _c(\n              \"vs-button\",\n              {\n                staticClass: \"mt-5 block\",\n                attrs: { type: \"filled\" },\n                on: {\n                  click: function($event) {\n                    $event.preventDefault()\n                    return _vm.submitForm($event)\n                  }\n                }\n              },\n              [_vm._v(\"Submit\")]\n            )\n          ],\n          1\n        )\n      ]),\n      _c(\"template\", { slot: \"codeContainer\" }, [\n        _vm._v(\n          '\\n<template>\\n  <form>\\n    <div class=\"vx-row\">\\n\\n      <!-- required -->\\n      <div class=\"vx-col w-1/2\">\\n        <vs-input size=\"large\" v-validate=\"\\'required\\'\" label=\"This field is required\" name=\"required\" v-model=\"required\" class=\"mt-5 w-full\" />\\n        <span class=\"text-danger text-sm\" v-show=\"errors.has(\\'required\\')\">' +\n            _vm._s(\"{{ errors.first('required') }}\") +\n            '</span>\\n      </div>\\n\\n      <!-- Only alphabetic characters -->\\n      <div class=\"vx-col w-1/2\">\\n        <vs-input size=\"large\" v-validate=\"\\'alpha\\'\" label=\"Only alphabetic characters\" name=\"alpha\" v-model=\"alpha\" class=\"mt-5 w-full\" />\\n        <span class=\"text-danger text-sm\" v-show=\"errors.has(\\'alpha\\')\">' +\n            _vm._s(\"{{ errors.first('alpha') }}\") +\n            '</span>\\n      </div>\\n\\n      <!-- Only alphabetic characters, numbers, dashes or underscores -->\\n      <div class=\"vx-col w-1/2\">\\n        <vs-input size=\"large\" v-validate=\"\\'alpha_dash\\'\" label=\"Only alphabetic characters, numbers, dashes or underscores\" name=\"alpha_dash\" v-model=\"alpha_dash\" class=\"mt-5 w-full\" />\\n        <span class=\"text-danger text-sm\" v-show=\"errors.has(\\'alpha_dash\\')\">' +\n            _vm._s(\"{{ errors.first('alpha_dash') }}\") +\n            '</span>\\n      </div>\\n\\n      <!-- May contain alphabetic characters or numbers -->\\n      <div class=\"vx-col w-1/2\">\\n        <vs-input size=\"large\" v-validate=\"\\'alpha_num\\'\" label=\"May contain alphabetic characters or numbers\" name=\"alpha_num\" v-model=\"alpha_num\" class=\"mt-5 w-full\" />\\n        <span class=\"text-danger text-sm\" v-show=\"errors.has(\\'alpha_num\\')\">' +\n            _vm._s(\"{{ errors.first('alpha_num') }}\") +\n            '</span>\\n      </div>\\n\\n      <!-- Must only consist of numbers -->\\n      <div class=\"vx-col w-1/2\">\\n        <vs-input size=\"large\" v-validate=\"\\'numeric\\'\" label=\"Must only consist of numbers\" name=\"numeric\" v-model=\"numeric\" class=\"mt-5 w-full\" />\\n        <span class=\"text-danger text-sm\" v-show=\"errors.has(\\'numeric\\')\">' +\n            _vm._s(\"{{ errors.first('numeric') }}\") +\n            '</span>\\n      </div>\\n\\n      <!-- Only alphabetic characters or spaces -->\\n      <div class=\"vx-col w-1/2\">\\n        <vs-input size=\"large\" v-validate=\"\\'alpha_spaces\\'\" label=\"Only alphabetic characters or spaces\" name=\"alpha_spaces\" v-model=\"alpha_spaces\" class=\"mt-5 w-full\" />\\n        <span class=\"text-danger text-sm\" v-show=\"errors.has(\\'alpha_spaces\\')\">' +\n            _vm._s(\"{{ errors.first('alpha_spaces') }}\") +\n            '</span>\\n      </div>\\n\\n      <!-- Must be a valid email -->\\n      <div class=\"vx-col w-1/2\">\\n        <vs-input size=\"large\" v-validate=\"\\'email\\'\" label=\"Must be a valid email\" name=\"email\" v-model=\"email\" class=\"mt-5 w-full\" />\\n        <span class=\"text-danger text-sm\" v-show=\"errors.has(\\'email\\')\">' +\n            _vm._s(\"{{ errors.first('email') }}\") +\n            '</span>\\n      </div>\\n\\n      <!-- Must be a valid url -->\\n      <div class=\"vx-col w-1/2\">\\n        <vs-input size=\"large\" v-validate=\"\\'url:require_protocol\\'\" data-vv-as=\"field\" label=\"Must be a valid url\" name=\"url\" v-model=\"url\" class=\"mt-5 w-full\" />\\n        <span class=\"text-danger text-sm\" v-show=\"errors.has(\\'url\\')\">' +\n            _vm._s(\"{{ errors.first('url') }}\") +\n            '</span>\\n      </div>\\n\\n      <!-- Length should not be less than the specified length : 3 -->\\n      <div class=\"vx-col w-1/2\">\\n        <vs-input size=\"large\" v-validate=\"\\'min:3\\'\" label=\"Length should not be less than the specified length : 3\" name=\"min\" v-model=\"min\" class=\"mt-5 w-full\" />\\n        <span class=\"text-danger text-sm\" v-show=\"errors.has(\\'min\\')\">' +\n            _vm._s(\"{{ errors.first('min') }}\") +\n            '</span>\\n      </div>\\n\\n      <!-- Length may not exceed the specified length : 6 -->\\n      <div class=\"vx-col w-1/2\">\\n        <vs-input size=\"large\" v-validate=\"\\'max:6\\'\" label=\"Length may not exceed the specified length : 6\" name=\"max\" v-model=\"max\" class=\"mt-5 w-full\" />\\n        <span class=\"text-danger text-sm\" v-show=\"errors.has(\\'max\\')\">' +\n            _vm._s(\"{{ errors.first('max') }}\") +\n            '</span>\\n      </div>\\n\\n      <!-- Password 1 -->\\n      <div class=\"vx-col w-1/2\">\\n        <vs-input type=\"password\" size=\"large\" v-validate=\"\\'min:6|max:10\\'\" label=\"Password 1\" name=\"password\" v-model=\"password\" class=\"mt-5 w-full\" />\\n        <span class=\"text-danger text-sm\" v-show=\"errors.has(\\'password\\')\">' +\n            _vm._s(\"{{ errors.first('password') }}\") +\n            '</span>\\n      </div>\\n\\n      <!-- Confirm Password -->\\n      <div class=\"vx-col w-1/2\">\\n        <vs-input size=\"large\" v-validate=\"\\'min:6|max:10|confirmed:password\\'\" label=\"Confirm Password\" name=\"confirm_password\" v-model=\"confirm_password\" class=\"mt-5 w-full\" data-vv-as=\"password\" />\\n        <span class=\"text-danger text-sm\" v-show=\"errors.has(\\'confirm_password\\')\">' +\n            _vm._s(\"{{ errors.first('confirm_password') }}\") +\n            '</span>\\n      </div>\\n\\n      <!-- Date Format: dd/MM/yyyy -->\\n      <div class=\"vx-col w-1/2\">\\n        <vs-input size=\"large\" v-validate=\"\\'date_format:dd/MM/yyyy\\'\" label=\"Date Format: dd/MM/yyyy\" name=\"date_format\" v-model=\"date_format\" class=\"mt-5 w-full\" />\\n        <span class=\"text-danger text-sm\" v-show=\"errors.has(\\'date_format\\')\">' +\n            _vm._s(\"{{ errors.first('date_format') }}\") +\n            '</span>\\n      </div>\\n\\n      <!-- Numeric value between minimum value and a maximum value : 1 and 11 -->\\n      <div class=\"vx-col w-1/2\">\\n        <vs-input size=\"large\" v-validate=\"\\'between:1,11\\'\" label=\"Numeric value between minimum value and a maximum value : 1 and 11\" name=\"between\" v-model=\"between\" class=\"mt-5 w-full\" />\\n        <span class=\"text-danger text-sm\" v-show=\"errors.has(\\'between\\')\">' +\n            _vm._s(\"{{ errors.first('between') }}\") +\n            '</span>\\n      </div>\\n\\n      <!-- Valid credit card -->\\n      <div class=\"vx-col w-1/2\">\\n        <vs-input size=\"large\" v-validate=\"\\'credit_card\\'\" label=\"Valid credit card\" name=\"credit_card\" v-model=\"credit_card\" class=\"mt-5 w-full\" />\\n        <span class=\"text-danger text-sm\" v-show=\"errors.has(\\'credit_card\\')\">' +\n            _vm._s(\"{{ errors.first('credit_card') }}\") +\n            '</span>\\n      </div>\\n\\n      <!-- Must be a valid date between the two dates specified : 10/09/2016 - 20/09/2016 -->\\n      <div class=\"vx-col w-1/2\">\\n        <vs-input size=\"large\" v-validate=\"\\'date_format:dd/MM/yyyy|date_between:10/09/2016,20/09/2016\\'\" label=\"Must be a valid date between the two dates specified : 10/09/2016 - 20/09/2016\" name=\"date_between\" v-model=\"date_between\" class=\"mt-5 w-full\" />\\n        <span class=\"text-danger text-sm\" v-show=\"errors.has(\\'date_between\\')\">' +\n            _vm._s(\"{{ errors.first('date_between') }}\") +\n            '</span>\\n      </div>\\n\\n      <!-- Must be numeric and have the specified number of digits : 3 -->\\n      <div class=\"vx-col w-1/2\">\\n        <vs-input size=\"large\" v-validate=\"\\'digits:3\\'\" label=\"Must be numeric and have the specified number of digits : 3\" name=\"digits\" v-model=\"digits\" class=\"mt-5 w-full\" />\\n        <span class=\"text-danger text-sm\" v-show=\"errors.has(\\'digits\\')\">' +\n            _vm._s(\"{{ errors.first('digits') }}\") +\n            '</span>\\n      </div>\\n\\n      <!-- Must have a value that is in the specified list : 1 or 3 -->\\n      <div class=\"vx-col w-1/2\">\\n        <vs-select v-validate=\"\\'included:1,3\\'\" v-model=\"select1\" name=\"included\" label=\"Must have a value that is in the specified list : 1 or 3\" class=\"select-large mt-5 w-full\">\\n          <vs-select-item :key=\"index\" :value=\"item.value\" :text=\"item.text\" v-for=\"(item,index) in options1\" />\\n        </vs-select>\\n        <span class=\"text-danger text-sm\" v-show=\"errors.has(\\'included\\')\">' +\n            _vm._s(\"{{ errors.first('included') }}\") +\n            '</span>\\n      </div>\\n\\n      <!-- Numeric value and must not be greater than the specified value : 100 -->\\n      <div class=\"vx-col w-1/2\">\\n        <vs-input size=\"large\" v-validate=\"\\'max_value:100\\'\" label=\"Numeric value and must not be greater than the specified value : 100\" name=\"max_value\" v-model=\"max_value\" class=\"mt-5 w-full\" />\\n        <span class=\"text-danger text-sm\" v-show=\"errors.has(\\'max_value\\')\">' +\n            _vm._s(\"{{ errors.first('max_value') }}\") +\n            '</span>\\n      </div>\\n\\n      <!-- Numeric value and must not be less than the specified value : 10 -->\\n      <div class=\"vx-col w-1/2\">\\n        <vs-input size=\"large\" v-validate=\"\\'min_value:10\\'\" label=\"Numeric value and must not be less than the specified value : 10\" name=\"min_value\" v-model=\"min_value\" class=\"mt-5 w-full\" />\\n        <span class=\"text-danger text-sm\" v-show=\"errors.has(\\'min_value\\')\">' +\n            _vm._s(\"{{ errors.first('min_value') }}\") +\n            '</span>\\n      </div>\\n\\n      <!-- Must match the specified regular expression : ^([0-9]+)$ - numbers only -->\\n      <div class=\"vx-col w-full\">\\n        <vs-input size=\"large\" v-validate=\"{regex: \\'^([0-9]+)$\\' }\" label=\"Must match the specified regular expression : ^([0-9]+)$ - numbers only\" name=\"regex\" v-model=\"regex\" class=\"mt-5 w-full\" />\\n        <span class=\"text-danger text-sm\" v-show=\"errors.has(\\'regex\\')\">' +\n            _vm._s(\"{{ errors.first('regex') }}\") +\n            '</span>\\n      </div>\\n    </div>\\n    <vs-button type=\"filled\" @click.prevent=\"submitForm\" class=\"mt-5 block\">Submit</vs-button>\\n  </form>\\n</template>\\n\\n<script>\\nexport default {\\n  data() {\\n    return {\\n      required: \"\",\\n      alpha: \"\",\\n      alpha_dash: \"\",\\n      alpha_num: \"\",\\n      numeric: \"\",\\n      alpha_spaces: \"\",\\n      email: \"\",\\n      url: \"\",\\n      min: \"\",\\n      max: \"\",\\n      password: \"\",\\n      confirm_password: \"\",\\n      date_format: \"\",\\n      between: \"\",\\n      credit_card: \"\",\\n      date_between: \"\",\\n      digits: \"\",\\n      select1: \"\",\\n      options1: [\\n        { text: \"One\", value: 1 },\\n        { text: \"Two\", value: 2 },\\n        { text: \"Three\", value: 3 },\\n        { text: \"Four\", value: 4 },\\n        { text: \"Five\", value: 5 },\\n      ],\\n      max_value: \"\",\\n      min_value: \"\",\\n      regex: \"\",\\n    }\\n  },\\n  methods: {\\n    submitForm() {\\n      this.$validator.validateAll().then(result => {\\n        if (result) {\\n          // if form have no errors\\n          alert(\"form submitted!\");\\n        } else {\\n          // form have errors\\n        }\\n      })\\n    }\\n  },\\n}\\n</script>\\n        '\n        )\n      ])\n    ],\n    2\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }"]}