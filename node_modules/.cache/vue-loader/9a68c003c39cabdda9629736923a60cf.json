{"remainingRequest":"/Users/gim-yeongjae/Desktop/storelink-project/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/gim-yeongjae/Desktop/storelink-project/src/layouts/components/vx-tooltip/VxTooltip.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/gim-yeongjae/Desktop/storelink-project/src/layouts/components/vx-tooltip/VxTooltip.vue","mtime":1610509510812},{"path":"/Users/gim-yeongjae/Desktop/storelink-project/node_modules/cache-loader/dist/cjs.js","mtime":1610346344693},{"path":"/Users/gim-yeongjae/Desktop/storelink-project/node_modules/babel-loader/lib/index.js","mtime":1610344922456},{"path":"/Users/gim-yeongjae/Desktop/storelink-project/node_modules/cache-loader/dist/cjs.js","mtime":1610346344693},{"path":"/Users/gim-yeongjae/Desktop/storelink-project/node_modules/vue-loader/lib/index.js","mtime":1610344923547}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport utils from '@/assets/utils'\nimport _color from '@/assets/utils/color.js'\nexport default {\n  name:'vx-tooltip',\n  props:{\n    title:{\n      default:null,\n      type:[String, Number]\n    },\n    text:{\n      default:null,\n      type:[String, Number]\n    },\n    color:{\n      default:null,\n      type:String\n    },\n    position:{\n      default:'top',\n      type:String\n    },\n    delay:{\n      default:'0s',\n      type:[Number, String]\n    }\n  },\n  data:() => ({\n    cords:{},\n    active:false,\n    widthx: 'auto',\n    positionx: null,\n    noneAfter: false\n  }),\n  computed:{\n    style () {\n      return {\n        left:this.cords.left,\n        top:this.cords.top,\n        transitionDelay: this.active ? this.delay : '0s',\n        background:_color.getColor(this.color, 1),\n        width: this.widthx\n      }\n    }\n  },\n  methods:{\n    mouseenterx () {\n      this.active = true\n      this.$nextTick(() => {\n        utils.insertBody(this.$refs.vstooltip)\n        this.changePosition(this.$refs.convstooltip, this.$refs.vstooltip)\n      })\n    },\n    mouseleavex () {\n      this.active = false\n    },\n    changePosition (elxEvent, tooltip) {\n      this.noneAfter = false\n      this.positionx = null\n      const elx = elxEvent.closest('.con-vs-tooltip')\n      const scrollTopx = window.pageYOffset || document.documentElement.scrollTop\n      let topx = elx.getBoundingClientRect().top + scrollTopx - tooltip.clientHeight - 4\n      let leftx = elx.getBoundingClientRect().left - tooltip.clientWidth / 2 + elx.clientWidth / 2\n      const widthx = elx.clientWidth\n\n      if (this.position == 'bottom') {\n        topx = elx.getBoundingClientRect().top + scrollTopx + elx.clientHeight + 4\n      } else if (this.position == 'left') {\n        leftx = elx.getBoundingClientRect().left - tooltip.clientWidth - 4\n        topx = elx.getBoundingClientRect().top + scrollTopx + elx.clientHeight / 2 - tooltip.clientHeight / 2\n        if (Math.sign(leftx) == -1) {\n          leftx = elx.getBoundingClientRect().left\n          topx = elx.getBoundingClientRect().top + scrollTopx + elx.clientHeight + 4\n          this.positionx = 'bottom'\n          this.noneAfter = true\n        }\n      } else if (this.position == 'right') {\n        leftx = elx.getBoundingClientRect().left + elx.clientWidth + 4\n        topx = elx.getBoundingClientRect().top + scrollTopx + elx.clientHeight / 2 - tooltip.clientHeight / 2\n        if (window.innerWidth - (leftx + tooltip.clientWidth) <= 20) {\n          leftx = elx.getBoundingClientRect().left - tooltip.clientWidth / 2 - 10\n          topx = elx.getBoundingClientRect().top + scrollTopx + elx.clientHeight + 4\n          this.positionx = 'bottom'\n          this.noneAfter = true\n        }\n      }\n      this.cords = {\n        left: `${leftx}px`,\n        top: `${topx}px`,\n        width: `${widthx}px`\n      }\n    },\n    destroy () {\n      this.active = false\n      this.$nextTick(() => {\n        if (this.active) {\n          utils.removeBody(this.$refs.vstooltip)\n        }\n      })\n    }\n  }\n}\n",{"version":3,"sources":["VxTooltip.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAsfile":"VxTooltip.vue","sourceRoot":"src/layouts/components/vx-tooltip","sourcesContent":["<template>\n  <div\n    ref=\"convstooltip\"\n    class=\"con-vs-tooltip\"\n    @mouseleave=\"mouseleavex\"\n    @mouseenter=\"mouseenterx\"\n    @mouseup=\"destroy\"  >\n    <transition name=\"tooltip-fade\">\n      <div\n        v-show=\"active\"\n        ref=\"vstooltip\"\n        :class=\"[`vs-tooltip-${positionx || position}`,`vs-tooltip-${color}`, {'after-none': noneAfter}]\"\n        :style=\"style\"\n        class=\"vs-tooltip\">\n        <h4 v-if=\"title\">{{ title }}</h4>\n        {{ text }}\n      </div>\n    </transition>\n    <slot></slot>\n  </div>\n</template>\n<script>\nimport utils from '@/assets/utils'\nimport _color from '@/assets/utils/color.js'\nexport default {\n  name:'vx-tooltip',\n  props:{\n    title:{\n      default:null,\n      type:[String, Number]\n    },\n    text:{\n      default:null,\n      type:[String, Number]\n    },\n    color:{\n      default:null,\n      type:String\n    },\n    position:{\n      default:'top',\n      type:String\n    },\n    delay:{\n      default:'0s',\n      type:[Number, String]\n    }\n  },\n  data:() => ({\n    cords:{},\n    active:false,\n    widthx: 'auto',\n    positionx: null,\n    noneAfter: false\n  }),\n  computed:{\n    style () {\n      return {\n        left:this.cords.left,\n        top:this.cords.top,\n        transitionDelay: this.active ? this.delay : '0s',\n        background:_color.getColor(this.color, 1),\n        width: this.widthx\n      }\n    }\n  },\n  methods:{\n    mouseenterx () {\n      this.active = true\n      this.$nextTick(() => {\n        utils.insertBody(this.$refs.vstooltip)\n        this.changePosition(this.$refs.convstooltip, this.$refs.vstooltip)\n      })\n    },\n    mouseleavex () {\n      this.active = false\n    },\n    changePosition (elxEvent, tooltip) {\n      this.noneAfter = false\n      this.positionx = null\n      const elx = elxEvent.closest('.con-vs-tooltip')\n      const scrollTopx = window.pageYOffset || document.documentElement.scrollTop\n      let topx = elx.getBoundingClientRect().top + scrollTopx - tooltip.clientHeight - 4\n      let leftx = elx.getBoundingClientRect().left - tooltip.clientWidth / 2 + elx.clientWidth / 2\n      const widthx = elx.clientWidth\n\n      if (this.position == 'bottom') {\n        topx = elx.getBoundingClientRect().top + scrollTopx + elx.clientHeight + 4\n      } else if (this.position == 'left') {\n        leftx = elx.getBoundingClientRect().left - tooltip.clientWidth - 4\n        topx = elx.getBoundingClientRect().top + scrollTopx + elx.clientHeight / 2 - tooltip.clientHeight / 2\n        if (Math.sign(leftx) == -1) {\n          leftx = elx.getBoundingClientRect().left\n          topx = elx.getBoundingClientRect().top + scrollTopx + elx.clientHeight + 4\n          this.positionx = 'bottom'\n          this.noneAfter = true\n        }\n      } else if (this.position == 'right') {\n        leftx = elx.getBoundingClientRect().left + elx.clientWidth + 4\n        topx = elx.getBoundingClientRect().top + scrollTopx + elx.clientHeight / 2 - tooltip.clientHeight / 2\n        if (window.innerWidth - (leftx + tooltip.clientWidth) <= 20) {\n          leftx = elx.getBoundingClientRect().left - tooltip.clientWidth / 2 - 10\n          topx = elx.getBoundingClientRect().top + scrollTopx + elx.clientHeight + 4\n          this.positionx = 'bottom'\n          this.noneAfter = true\n        }\n      }\n      this.cords = {\n        left: `${leftx}px`,\n        top: `${topx}px`,\n        width: `${widthx}px`\n      }\n    },\n    destroy () {\n      this.active = false\n      this.$nextTick(() => {\n        if (this.active) {\n          utils.removeBody(this.$refs.vstooltip)\n        }\n      })\n    }\n  }\n}\n</script>\n"]}]}