{"remainingRequest":"/Users/gim-yeongjae/Desktop/storelink3-admin/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/gim-yeongjae/Desktop/storelink3-admin/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/gim-yeongjae/Desktop/storelink3-admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/gim-yeongjae/Desktop/storelink3-admin/src/views/components/extra-components/autocomplete/Autocomplete.vue?vue&type=template&id=0c3865a2&","dependencies":[{"path":"/Users/gim-yeongjae/Desktop/storelink3-admin/src/views/components/extra-components/autocomplete/Autocomplete.vue","mtime":1610509510834},{"path":"/Users/gim-yeongjae/Desktop/storelink3-admin/node_modules/cache-loader/dist/cjs.js","mtime":1610346344693},{"path":"/Users/gim-yeongjae/Desktop/storelink3-admin/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1610344923547},{"path":"/Users/gim-yeongjae/Desktop/storelink3-admin/node_modules/cache-loader/dist/cjs.js","mtime":1610346344693},{"path":"/Users/gim-yeongjae/Desktop/storelink3-admin/node_modules/vue-loader/lib/index.js","mtime":1610344923547}],"contextDependencies":[],"result":["var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"div\",\n    { attrs: { id: \"page-autocomplete-demo\" } },\n    [\n      _c(\n        \"vx-card\",\n        { attrs: { title: \"Basic Autocomplete\", \"code-toggler\": \"\" } },\n        [\n          _c(\"vue-simple-suggest\", {\n            attrs: { list: _vm.simpleSuggestionList, \"filter-by-query\": true },\n            model: {\n              value: _vm.chosen,\n              callback: function($$v) {\n                _vm.chosen = $$v\n              },\n              expression: \"chosen\"\n            }\n          }),\n          _c(\"p\", { staticClass: \"mt-4\" }, [\n            _vm._v(\"Chosen element: \" + _vm._s(_vm.chosen))\n          ]),\n          _c(\"template\", { slot: \"codeContainer\" }, [\n            _vm._v(\n              '\\n<template>\\n  <vue-simple-suggest\\n    v-model=\"chosen\"\\n    :list=\"simpleSuggestionList\"\\n    :filter-by-query=\"true\">\\n    <!-- Filter by input text to only show the matching results -->\\n  </vue-simple-suggest>\\n\\n  <p class=\"mt-4\">Chosen element: ' +\n                _vm._s(_vm.chosen) +\n                \"</p>\\n</template>\\n\\n<script>\\nexport default {\\n  data() {\\n    return {\\n      chosen: '',\\n    }\\n  },\\n  methods: {\\n    simpleSuggestionList() {\\n      return [\\n        'Vue.js',\\n        'React.js',\\n        'Angular.js'\\n      ]\\n    },\\n  }\\n}\\n</script>\\n\\n<style lang=\\\"scss\\\">\\n@import \\\"@/assets/scss/vuexy/extraComponents/autocomplete.scss\\\";\\n</style>\\n      \"\n            )\n          ])\n        ],\n        2\n      ),\n      _c(\n        \"vx-card\",\n        { attrs: { title: \"Ajax Based Autocomplete\", \"code-toggler\": \"\" } },\n        [\n          _c(\n            \"vue-simple-suggest\",\n            {\n              ref: \"suggestComponent\",\n              attrs: {\n                pattern: \"\\\\w+\",\n                list: _vm.getList,\n                \"max-suggestions\": 10,\n                \"min-length\": 3,\n                debounce: 200,\n                \"filter-by-query\": false,\n                \"prevent-submit\": true,\n                controls: {\n                  selectionUp: [38, 33],\n                  selectionDown: [40, 34],\n                  select: [13, 36],\n                  hideList: [27, 35]\n                },\n                mode: _vm.mode,\n                \"nullable-select\": true,\n                placeholder: \"Search information...\",\n                \"value-attribute\": \"id\",\n                \"display-attribute\": \"text\"\n              },\n              on: { select: _vm.onSuggestSelect },\n              scopedSlots: _vm._u(\n                [\n                  {\n                    key: \"misc-item-above\",\n                    fn: function(ref) {\n                      var suggestions = ref.suggestions\n                      var query = ref.query\n                      return [\n                        _c(\"div\", { staticClass: \"misc-item\" }, [\n                          _c(\"span\", [\n                            _vm._v(\n                              \"You're searching for '\" + _vm._s(query) + \"'.\"\n                            )\n                          ])\n                        ]),\n                        suggestions.length > 0\n                          ? [\n                              _c(\"div\", { staticClass: \"misc-item\" }, [\n                                _c(\"span\", [\n                                  _vm._v(\n                                    _vm._s(suggestions.length) +\n                                      \" suggestions are shown...\"\n                                  )\n                                ])\n                              ]),\n                              _c(\"hr\")\n                            ]\n                          : !_vm.loading\n                          ? _c(\"div\", { staticClass: \"misc-item\" }, [\n                              _c(\"span\", [_vm._v(\"No results\")])\n                            ])\n                          : _vm._e()\n                      ]\n                    }\n                  },\n                  {\n                    key: \"suggestion-item\",\n                    fn: function(scope) {\n                      return _c(\n                        \"div\",\n                        { attrs: { title: scope.suggestion.description } },\n                        [\n                          _c(\"div\", { staticClass: \"text\" }, [\n                            _c(\"span\", {\n                              domProps: {\n                                innerHTML: _vm._s(_vm.boldenSuggestion(scope))\n                              }\n                            })\n                          ])\n                        ]\n                      )\n                    }\n                  },\n                  {\n                    key: \"misc-item-below\",\n                    fn: function(ref) {\n                      var suggestions = ref.suggestions\n                      return _vm.loading\n                        ? _c(\"div\", { staticClass: \"misc-item\" }, [\n                            _c(\"span\", [_vm._v(\"Loading...\")])\n                          ])\n                        : _vm._e()\n                    }\n                  }\n                ],\n                null,\n                true\n              ),\n              model: {\n                value: _vm.model,\n                callback: function($$v) {\n                  _vm.model = $$v\n                },\n                expression: \"model\"\n              }\n            },\n            [\n              _c(\"div\", { staticClass: \"g\" }, [\n                _c(\"input\", { attrs: { type: \"text\" } })\n              ])\n            ]\n          ),\n          _c(\"p\", { staticClass: \"mt-3\" }, [\n            _vm._v(\"Selected element (\" + _vm._s(typeof _vm.selected) + \"): \"),\n            _c(\"pre\", { staticClass: \"selected hljs\" }, [\n              _c(\"span\", { domProps: { innerHTML: _vm._s(_vm.selected) } })\n            ])\n          ]),\n          _c(\"template\", { slot: \"codeContainer\" }, [\n            _vm._v(\n              '\\n<template>\\n  <vue-simple-suggest\\n    pattern=\"\\\\w+\"\\n    v-model=\"model\"\\n    :list=\"getList\"\\n    :max-suggestions=\"10\"\\n    :min-length=\"3\"\\n    :debounce=\"200\"\\n    :filter-by-query=\"false\"\\n    :prevent-submit=\"true\"\\n    :controls=\"{\\n      selectionUp: [38, 33],\\n      selectionDown: [40, 34],\\n      select: [13, 36],\\n      hideList: [27, 35]\\n    }\"\\n    :mode=\"mode\"\\n    :nullable-select=\"true\"\\n    ref=\"suggestComponent\"\\n    placeholder=\"Search information...\"\\n    value-attribute=\"id\"\\n    display-attribute=\"text\"\\n    @select=\"onSuggestSelect\">\\n\\n    <div class=\"g\">\\n      <input type=\"text\">\\n    </div>\\n\\n    <template slot=\"misc-item-above\" slot-scope=\"{ suggestions, query }\">\\n      <div class=\"misc-item\">\\n        <span>You\\'re searching for \\'' +\n                _vm._s(\"{{ query }}\") +\n                '\\'.</span>\\n      </div>\\n\\n      <template v-if=\"suggestions.length > 0\">\\n        <div class=\"misc-item\">\\n          <span>' +\n                _vm._s(\"{{ suggestions.length }}\") +\n                ' suggestions are shown...</span>\\n        </div>\\n        <hr>\\n      </template>\\n\\n      <div class=\"misc-item\" v-else-if=\"!loading\">\\n        <span>No results</span>\\n      </div>\\n    </template>\\n\\n    <div slot=\"suggestion-item\" slot-scope=\"scope\" :title=\"scope.suggestion.description\">\\n      <div class=\"text\">\\n        <span v-html=\"boldenSuggestion(scope)\"></span>\\n      </div>\\n    </div>\\n\\n    <div class=\"misc-item\" slot=\"misc-item-below\" slot-scope=\"{ suggestions }\" v-if=\"loading\">\\n      <span>Loading...</span>\\n    </div>\\n  </vue-simple-suggest>\\n\\n  <p class=\"mt-3\">Selected element (' +\n                _vm._s(\"{{ typeof selected }}\") +\n                \"): <pre class=\\\"selected hljs\\\"><span v-html=\\\"selected\\\"></span></pre></p>\\n</template>\\n\\n<script>\\nexport default {\\n  data() {\\n    return {\\n      model: null,\\n    }\\n  },\\n  methods: {\\n    getList (inputValue) {\\n      return new Promise((resolve, reject) => {\\n        let url = `https://en.wikipedia.org/w/api.php?origin=*&action=opensearch&namespace=*&search=${inputValue}&limit=10&namespace=0&format=json`\\n        fetch(url).then(response => {\\n          if (!response.ok) {\\n            reject()\\n          }\\n          response.json().then(json => {\\n            json.shift();\\n            let result = []\\n            const fields = ['text', 'description', 'link']\\n            json.forEach((part, i) => {\\n              part.forEach((el, j) => {\\n                if (!result[j]) {\\n                  result.push({\\n                    id: j+1\\n                  })\\n                }\\n                result[j][fields[i]] = el\\n              })\\n            })\\n            resolve(result)\\n            // resolve([...(json.items || [])])\\n          }).catch(e => {\\n            reject(e)\\n          })\\n        }).catch(error => {\\n          this.loading = false\\n          reject(error)\\n        })\\n      })\\n    },\\n    onSuggestSelect (suggest) {\\n      this.selected = suggest\\n    },\\n    boldenSuggestion(scope) {\\n      if (!scope) return scope;\\n      const { suggestion, query } = scope;\\n      let result = this.$refs.suggestComponent.displayProperty(suggestion);\\n      if (!query) return result;\\n      const texts = query.split(/[\\\\s-_/\\\\\\\\|.]/gm).filter(t => !!t) || [''];\\n      return result.replace(new RegExp('(.*?)(' + texts.join('|') + ')(.*?)','gi'), '$1<b>$2</b>$3');\\n    },\\n  }\\n}\\n</script>\\n      \"\n            )\n          ])\n        ],\n        2\n      ),\n      _c(\n        \"vx-card\",\n        { attrs: { title: \"Mode\" } },\n        [\n          _c(\"p\", { staticClass: \"mb-3\" }, [\n            _vm._v(\"Determines the event, that triggers \"),\n            _c(\"code\", [_vm._v(\"v-model\")]),\n            _vm._v(\". Can be one of \"),\n            _c(\"code\", [_vm._v(\"'input'\")]),\n            _vm._v(\" (default) or \"),\n            _c(\"code\", [_vm._v(\"'select'\")]),\n            _vm._v(\".\")\n          ]),\n          _c(\"p\", { staticClass: \"mb-3\" }, [\n            _vm._v(\"For example, if \"),\n            _c(\"code\", [_vm._v(\"'input'\")]),\n            _vm._v(\n              \" is chosen - then v-model will update the value each time an \"\n            ),\n            _c(\"code\", [_vm._v(\"input\")]),\n            _vm._v(\" event is fired, setting the input's string.\")\n          ]),\n          _c(\"p\", { staticClass: \"mb-3\" }, [\n            _vm._v(\"Same is for \"),\n            _c(\"code\", [_vm._v(\"'select'\")]),\n            _vm._v(\n              \" - v-model changes only when something is selected from the list, setting the selected value (string, object or whatever) to its argument.\"\n            )\n          ]),\n          _c(\"p\", { staticClass: \"mb-3\" }, [\n            _vm._v(\n              \"A proper use-case for it being when one wants to use the component only for selection binding and custom input for text binding:\"\n            )\n          ]),\n          _c(\n            \"prism\",\n            { staticClass: \"rounded-lg\", attrs: { language: \"markup\" } },\n            [\n              _vm._v(\n                '\\n<vue-simple-suggest v-model=\"selected\" mode=\"select\">\\n  <input v-model=\"text\">\\n</vue-simple-suggest>\\n      '\n              )\n            ]\n          )\n        ],\n        1\n      )\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }"]}