{"remainingRequest":"/Users/gim-yeongjae/Desktop/storelink-project/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/gim-yeongjae/Desktop/storelink-project/src/components/vx-card/VxCard.vue?vue&type=style&index=0&lang=scss&","dependencies":[{"path":"/Users/gim-yeongjae/Desktop/storelink-project/src/components/vx-card/VxCard.vue","mtime":1610509510803},{"path":"/Users/gim-yeongjae/Desktop/storelink-project/node_modules/css-loader/index.js","mtime":1610346344703},{"path":"/Users/gim-yeongjae/Desktop/storelink-project/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1610344923547},{"path":"/Users/gim-yeongjae/Desktop/storelink-project/node_modules/postcss-loader/src/index.js","mtime":1607839467577},{"path":"/Users/gim-yeongjae/Desktop/storelink-project/node_modules/sass-loader/dist/cjs.js","mtime":1610346345537},{"path":"/Users/gim-yeongjae/Desktop/storelink-project/node_modules/cache-loader/dist/cjs.js","mtime":1610346344693},{"path":"/Users/gim-yeongjae/Desktop/storelink-project/node_modules/vue-loader/lib/index.js","mtime":1610344923547}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n@import \"@/assets/scss/vuexy/components/vxCard.scss\"\n",{"version":3,"sources":["VxCard.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoSA","file":"VxCard.vue","sourceRoot":"src/components/vx-card","sourcesContent":["<!-- =========================================================================================\n    File Name: VxCard.vue\n    Description: Card Component\n    Component Name: VxCard\n    ----------------------------------------------------------------------------------------\n    Item Name: Vuexy - Vuejs, HTML & Laravel Admin Dashboard Template\n      Author: Pixinvent\n    Author URL: http://www.themeforest.net/user/pixinvent\n========================================================================================== -->\n\n <template>\n    <div class=\"vx-card\" ref=\"card\" :class=\"[\n        {'overflow-hidden': tempHidden},\n        {'no-shadow': noShadow},\n        {'rounded-none': noRadius},\n        {'card-border': cardBorder},\n        cardClasses ]\" :style=\"cardStyles\"\n        v-on=\"$listeners\">\n        <div class=\"vx-card__header\" v-if=\"hasHeader\">\n\n            <!-- card title -->\n            <div class=\"vx-card__title\">\n                <h4 v-if=\"this.$props.title\" :style=\"titleStyles\" :class=\"titleClasses\">{{ title }}</h4>\n                <h6 v-if=\"this.$props.subtitle\" :style=\"subtitleStyles\" :class=\"subtitleClasses\">{{ subtitle }}</h6>\n            </div>\n\n            <!-- card actions -->\n            <div class=\"vx-card__actions\" v-if=\"hasAction\">\n                <slot name=\"actions\">\n                    <div class=\"vx-card__action-buttons\" v-if=\"(actionButtons || collapseAction || refreshContentAction || removeCardAction) && !codeToggler\">\n                        <feather-icon @click=\"toggleContent\" icon=\"ChevronUpIcon\" :class=\"{rotate180: !isContentCollapsed}\" class=\"ml-4\" v-if=\"actionButtons || collapseAction\" />\n                        <feather-icon @click=\"refreshcard\" icon=\"RotateCwIcon\" class=\"ml-4\" v-if=\"actionButtons || refreshContentAction\" />\n                        <feather-icon @click=\"removeCard\" icon=\"XIcon\" class=\"ml-4\" v-if=\"actionButtons || removeCardAction\" />\n                    </div>\n                    <div class=\"vx-card__code-toggler sm:block hidden\" v-if=\"codeToggler && !actionButtons\">\n                        <feather-icon icon=\"CodeIcon\" :class=\"{'border border-solid border-primary border-t-0 border-r-0 border-l-0': showCode}\" @click=\"toggleCode\"></feather-icon>\n                    </div>\n                </slot>\n            </div>\n        </div>\n\n        <div class=\"vx-card__collapsible-content vs-con-loading__container\" ref=\"content\" :class=\"[{collapsed: isContentCollapsed}, {'overflow-hidden': tempHidden}]\" :style=\"StyleItems\">\n\n            <!-- content with no body(no padding) -->\n            <slot name=\"no-body\"></slot>\n\n            <!-- content inside body(with padding) -->\n            <div class=\"vx-card__body\" v-if=\"this.$slots.default\">\n                <slot></slot>\n            </div>\n\n            <!-- content with no body(no padding) -->\n            <slot name=\"no-body-bottom\"></slot>\n\n            <div class=\"vx-card__footer\" v-if=\"this.$slots.footer\">\n                <slot name=\"footer\"></slot>\n            </div>\n        </div>\n\n        <div class=\"vx-card__code-container\" ref=\"codeContainer\" v-show=\"this.$slots.codeContainer\" :style=\"codeContainerStyles\" :class=\"{collapsed: !showCode}\">\n            <div class=\"code-content\">\n                <prism :language=\"codeLanguage\" :key=\"$vs.rtl\">\n                        <slot name=\"codeContainer\"></slot>\n                </prism>\n            </div>\n        </div>\n    </div>\n</template>\n\n<script>\nimport Prism from 'vue-prism-component'\nimport _color from '@/assets/utils/color.js'\n\nexport default{\n  name: 'vx-card',\n  props: {\n    title: String,\n    subtitle: String,\n    actionButtons: {\n      type: Boolean,\n      default: false\n    },\n    actionButtonsColor: {\n      type: String,\n      default: 'success'\n    },\n    codeToggler: {\n      type: Boolean,\n      default: false\n    },\n    noShadow: {\n      default: false,\n      type: Boolean\n    },\n    noRadius: {\n      default: false,\n      type: Boolean\n    },\n    cardBorder: {\n      default: false,\n      type: Boolean\n    },\n    codeLanguage: {\n      default: 'markup',\n      type: String\n    },\n    collapseAction: {\n      default: false,\n      type: Boolean\n    },\n    refreshContentAction: {\n      default: false,\n      type: Boolean\n    },\n    removeCardAction: {\n      default: false,\n      type: Boolean\n    },\n    headerBackground: {\n      default: '',\n      type: String\n    },\n    // bodyBackground: {\n    //   default: '',\n    //   type: String\n    // },\n    // headerbackground: {\n    //   default: '',\n    //   type: String\n    // },\n    cardBackground: {\n      default: '',\n      type: String\n    },\n    contentColor: {\n      default: '',\n      type: String\n    },\n    titleColor: {\n      default: '',\n      type: String\n    },\n    subtitleColor: {\n      default: '#b8c2cc',\n      type: String\n    }\n  },\n  data () {\n    return {\n      isContentCollapsed: false,\n      showCode: false,\n      maxHeight: null,\n      cardMaxHeight: null,\n      codeContainerMaxHeight: '0px',\n      tempHidden: false\n    }\n  },\n  computed: {\n    hasAction () {\n      return this.$slots.actions || (this.actionButtons || this.collapseAction || this.refreshContentAction || this.removeCardAction || this.codeToggler)\n    },\n    hasHeader () {\n      return this.hasAction || (this.title || this.subtitle)\n    },\n    StyleItems () {\n      return { maxHeight: this.maxHeight }\n    },\n    cardStyles () {\n      const obj = { maxHeight: this.cardMaxHeight }\n      if (!_color.isColor(this.cardBackground)) obj.background = _color.getColor(this.cardBackground)\n      if (!_color.isColor(this.contentColor)) obj.color = _color.getColor(this.contentColor)\n      return obj\n    },\n    codeContainerStyles () {\n      return { maxHeight: this.codeContainerMaxHeight }\n    },\n    cardClasses () {\n      let str = ''\n\n      // Add bg class\n      if (_color.isColor(this.cardBackground)) {\n        str += ` bg-${this.cardBackground}`\n      }\n\n      // add content color\n      if (_color.isColor(this.contentColor)) {\n        str += ` text-${this.contentColor}`\n      }\n\n      return str.trim()\n    },\n    titleStyles () {\n      return {\n        color: _color.getColor(this.titleColor)\n      }\n    },\n    titleClasses () {\n      let str = ''\n\n      // add content color\n      if (_color.isColor(this.titleColor)) {\n        str += ` text-${this.titleColor}`\n      }\n\n      return str.trim()\n    },\n    subtitleStyles () {\n      const obj = {}\n      if (!_color.isColor(this.subtitleColor)) obj.color = _color.getColor(this.subtitleColor)\n\n      return obj\n    },\n    subtitleClasses () {\n      let str = ''\n\n      // add content color\n      if (_color.isColor(this.subtitleColor)) {\n        str += ` text-${this.subtitleColor}`\n      }\n\n      return str.trim()\n    }\n  },\n  methods: {\n    toggleContent () {\n      this.$refs.content.style.overflow = 'hidden'\n      const scrollHeight = this.$refs.content.scrollHeight\n      if (this.maxHeight === '1.5rem') {\n        this.maxHeight = `${scrollHeight}px`\n        setTimeout(() => {\n          this.maxHeight = 'none'\n          this.$refs.content.style.overflow = null\n        }, 300)\n      } else {\n        this.maxHeight = `${scrollHeight}px`\n        setTimeout(() => {\n          this.maxHeight = '1.5rem'\n          this.$refs.content.style.overflow = null\n        }, 50)\n      }\n      this.isContentCollapsed = !this.isContentCollapsed\n      this.$emit('toggleCollapse', this.isContentCollapsed)\n    },\n    refreshcard () {\n      this.$vs.loading({\n        container: this.$refs.content,\n        scale: 0.5\n      })\n      this.tempHidden = true\n      this.$emit('refresh', this)\n    },\n    removeRefreshAnimation (time = 100) {\n      setTimeout(() => {\n        this.$vs.loading.close(this.$refs.content)\n        this.tempHidden = false\n      }, time)\n    },\n    removeCard () {\n      const scrollHeight = this.$refs.card.scrollHeight\n      this.cardMaxHeight = `${scrollHeight}px`\n      this.$el.style.overflow = 'hidden'\n      setTimeout(() => {\n        this.cardMaxHeight = '0px'\n      }, 50)\n      this.$emit('remove')\n    },\n    toggleCode () {\n      this.tempHidden = true\n      this.showCode = !this.showCode\n      const scrollHeight = this.$refs.codeContainer.scrollHeight\n      if (this.codeContainerMaxHeight === '0px') {\n        this.codeContainerMaxHeight = `${scrollHeight}px`\n        setTimeout(() => {\n          this.codeContainerMaxHeight = 'none'\n          this.tempHidden = false\n        }, 300)\n      } else {\n        this.codeContainerMaxHeight = `${scrollHeight}px`\n        setTimeout(() => {\n          this.codeContainerMaxHeight = '0px'\n          this.tempHidden = false\n        }, 150)\n      }\n    }\n  },\n  components: {\n    Prism\n  }\n}\n</script>\n\n<style lang=\"scss\">\n@import \"@/assets/scss/vuexy/components/vxCard.scss\"\n</style>\n"]}]}