{"remainingRequest":"/Users/gim-yeongjae/Desktop/storelink3-admin/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/gim-yeongjae/Desktop/storelink3-admin/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/gim-yeongjae/Desktop/storelink3-admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/gim-yeongjae/Desktop/storelink3-admin/src/views/components/vuesax/dialogs/DialogsPrompt.vue?vue&type=template&id=cf2fc422&","dependencies":[{"path":"/Users/gim-yeongjae/Desktop/storelink3-admin/src/views/components/vuesax/dialogs/DialogsPrompt.vue","mtime":1610509510856},{"path":"/Users/gim-yeongjae/Desktop/storelink3-admin/node_modules/cache-loader/dist/cjs.js","mtime":1610346344693},{"path":"/Users/gim-yeongjae/Desktop/storelink3-admin/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1610344923547},{"path":"/Users/gim-yeongjae/Desktop/storelink3-admin/node_modules/cache-loader/dist/cjs.js","mtime":1610346344693},{"path":"/Users/gim-yeongjae/Desktop/storelink3-admin/node_modules/vue-loader/lib/index.js","mtime":1610344923547}],"contextDependencies":[],"result":["var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"vx-card\",\n    { attrs: { title: \"Prompt\", \"code-toggler\": \"\" } },\n    [\n      _c(\"p\", [\n        _vm._v(\n          \"To add a dialog of type prompt we have a global function a completely independent component \"\n        ),\n        _c(\"code\", [_vm._v(\"vs-prompt\")]),\n        _vm._v(\n          \". This allows more flexibility with the input and ability to add any type of input and components\"\n        )\n      ]),\n      _c(\n        \"div\",\n        { staticClass: \"my-3\" },\n        [\n          _c(\"span\", [\n            _vm._v(\n              \"The properties of the component are equivalent to those of the global function only with the vs before each property something like\"\n            )\n          ]),\n          _c(\"vx-list\", {\n            attrs: { list: [\"function: color\", \"component = vsColor\"] }\n          })\n        ],\n        1\n      ),\n      _c(\n        \"div\",\n        { staticClass: \"demo-alignment\" },\n        [\n          _c(\n            \"vs-button\",\n            {\n              attrs: { color: \"primary\", type: \"border\" },\n              on: {\n                click: function($event) {\n                  _vm.activePrompt = true\n                }\n              }\n            },\n            [_vm._v(\"Run prompt\")]\n          ),\n          _c(\n            \"vs-button\",\n            {\n              attrs: { color: \"primary\", type: \"border\" },\n              on: {\n                click: function($event) {\n                  _vm.activePrompt2 = true\n                }\n              }\n            },\n            [_vm._v(\"Run prompt inputs\")]\n          ),\n          _c(\"div\", { staticClass: \"op-block\" }, [\n            _vm._v(\n              \"Security Code: \" + _vm._s(_vm.val == null ? \"null\" : _vm.val)\n            )\n          ]),\n          _c(\"div\", { staticClass: \"op-block\" }, [\n            _vm._v(\n              \"\\n        Name: \" +\n                _vm._s(_vm.valMultipe.value1) +\n                \" |\\n        Last Name: \" +\n                _vm._s(_vm.valMultipe.value2) +\n                \"\\n      \"\n            )\n          ])\n        ],\n        1\n      ),\n      _c(\n        \"vs-prompt\",\n        {\n          attrs: { active: _vm.activePrompt },\n          on: {\n            cancel: function($event) {\n              _vm.val = \"\"\n            },\n            accept: _vm.acceptAlert,\n            close: _vm.close,\n            \"update:active\": function($event) {\n              _vm.activePrompt = $event\n            }\n          }\n        },\n        [\n          _c(\n            \"div\",\n            { staticClass: \"con-exemple-prompt\" },\n            [\n              _c(\"span\", [_vm._v(\"Enter the security code\")]),\n              _c(\"vs-input\", {\n                staticClass: \"mt-3 w-full\",\n                attrs: { placeholder: \"Code\", \"vs-placeholder\": \"Code\" },\n                model: {\n                  value: _vm.val,\n                  callback: function($$v) {\n                    _vm.val = $$v\n                  },\n                  expression: \"val\"\n                }\n              })\n            ],\n            1\n          )\n        ]\n      ),\n      _c(\n        \"vs-prompt\",\n        {\n          attrs: { \"is-valid\": _vm.validName, active: _vm.activePrompt2 },\n          on: {\n            cancel: _vm.clearValMultiple,\n            accept: _vm.acceptAlert,\n            close: _vm.close,\n            \"update:active\": function($event) {\n              _vm.activePrompt2 = $event\n            }\n          }\n        },\n        [\n          _c(\n            \"div\",\n            { staticClass: \"con-exemple-prompt\" },\n            [\n              _vm._v(\"\\n        Enter your first and last name to \"),\n              _c(\"b\", [_vm._v(\"continue\")]),\n              _vm._v(\".\\n      \"),\n              _c(\"vs-input\", {\n                staticClass: \"mt-4 mb-2 w-full\",\n                attrs: { placeholder: \"Name\" },\n                model: {\n                  value: _vm.valMultipe.value1,\n                  callback: function($$v) {\n                    _vm.$set(_vm.valMultipe, \"value1\", $$v)\n                  },\n                  expression: \"valMultipe.value1\"\n                }\n              }),\n              _c(\"vs-input\", {\n                staticClass: \"w-full\",\n                attrs: { placeholder: \"Last Name\" },\n                model: {\n                  value: _vm.valMultipe.value2,\n                  callback: function($$v) {\n                    _vm.$set(_vm.valMultipe, \"value2\", $$v)\n                  },\n                  expression: \"valMultipe.value2\"\n                }\n              }),\n              _c(\n                \"vs-alert\",\n                {\n                  staticClass: \"mt-4\",\n                  attrs: {\n                    active: !_vm.validName,\n                    color: \"danger\",\n                    \"vs-icon\": \"new_releases\"\n                  }\n                },\n                [\n                  _vm._v(\n                    \"\\n        Fields can not be empty please enter the data\\n      \"\n                  )\n                ]\n              )\n            ],\n            1\n          )\n        ]\n      ),\n      _c(\"template\", { slot: \"codeContainer\" }, [\n        _vm._v(\n          '\\n<template>\\n    <div class=\"demo-alignment\">\\n      <vs-button @click=\"activePrompt = true\" color=\"primary\" type=\"border\">Run prompt</vs-button>\\n      <vs-button @click=\"activePrompt2 = true\" color=\"primary\" type=\"border\">Run prompt inputs</vs-button>\\n      <div class=\"op-block\">Security Code: ' +\n            _vm._s(\"{{ val == null ? 'null' : val }}\") +\n            ' </div>\\n      <div class=\"op-block\">\\n        Name: ' +\n            _vm._s(\"{{ valMultipe.value1 }}\") +\n            \" | Last Name: \" +\n            _vm._s(\"{{ valMultipe.value2 }}\") +\n            '\\n      </div>\\n\\n    </div>\\n\\n    <vs-prompt\\n      @cancel=\"val=\\'\\'\"\\n      @accept=\"acceptAlert\"\\n      @close=\"close\"\\n      :active.sync=\"activePrompt\">\\n      <div class=\"con-exemple-prompt\">\\n        <span>Enter the security code</span>\\n      <vs-input placeholder=\"Code\" vs-placeholder=\"Code\" v-model=\"val\" class=\"mt-3 w-full\" />\\n      </div>\\n    </vs-prompt>\\n\\n    <vs-prompt\\n      @cancel=\"clearValMultiple\"\\n      @accept=\"acceptAlert\"\\n      @close=\"close\"\\n      :is-valid=\"validName\"\\n      :active.sync=\"activePrompt2\">\\n      <div class=\"con-exemple-prompt\">\\n        Enter your first and last name to <b>continue</b>.\\n      <vs-input placeholder=\"Name\" v-model=\"valMultipe.value1\" class=\"mt-4 mb-2 w-full\" />\\n      <vs-input placeholder=\"Last Name\" v-model=\"valMultipe.value2\" class=\"w-full\" />\\n\\n      <vs-alert :vs-active=\"!validName\" color=\"danger\" vs-icon=\"new_releases\" >\\n        Fields can not be empty please enter the data\\n      </vs-alert>\\n      </div>\\n    </vs-prompt>\\n</template>\\n\\n<script>\\nexport default {\\n  data(){\\n    return {\\n      activePrompt:false,\\n      activePrompt2:false,\\n      val:\\'\\',\\n      valMultipe:{\\n        value1:\\'\\',\\n        value2:\\'\\'\\n      },\\n    }\\n  },\\n  computed:{\\n    validName(){\\n      return (this.valMultipe.value1.length > 0 && this.valMultipe.value2.length > 0)\\n    }\\n  },\\n  methods:{\\n    acceptAlert(){\\n      this.$vs.notify({\\n        color:\\'success\\',\\n        title:\\'Accept Selected\\',\\n        text:\\'Lorem ipsum dolor sit amet, consectetur\\'\\n      })\\n    },\\n    close(){\\n      this.$vs.notify({\\n        color:\\'danger\\',\\n        title:\\'Closed\\',\\n        text:\\'You close a dialog!\\'\\n      })\\n    },\\n    clearValMultiple() {\\n      this.valMultipe.value1 = \"\";\\n      this.valMultipe.value2 = \"\";\\n    }\\n  }\\n}\\n</script>\\n    '\n        )\n      ])\n    ],\n    2\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }"]}